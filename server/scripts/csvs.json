{"operators": [{"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\"kind\":\"Kafka\",\"metadata\":{\"name\":\"my-cluster\"},\"spec\":{\"kafka\":{\"replicas\":3,\"listeners\":{\"plain\":{},\"tls\":{}},\"config\":{\"offsets.topic.replication.factor\":3,\"transaction.state.log.replication.factor\":3,\"transaction.state.log.min.isr\":2},\"storage\":{\"type\":\"ephemeral\"}},\"zookeeper\":{\"replicas\":3,\"storage\":{\"type\":\"ephemeral\"}},\"entityOperator\":{\"topicOperator\":{},\"userOperator\":{}}}},\n      {\"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\"kind\":\"KafkaConnect\",\"metadata\":{\"name\":\"my-connect-cluster\"},\"spec\":{\"replicas\":1,\"bootstrapServers\":\"my-cluster-kafka-bootstrap:9093\",\"tls\":{\"trustedCertificates\":[{\"secretName\":\"my-cluster-cluster-ca-cert\",\"certificate\":\"ca.crt\"}]}}},\n      {\"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\"kind\":\"KafkaConnectS2I\",\"metadata\":{\"name\":\"my-connect-cluster\"},\"spec\":{\"replicas\":1,\"bootstrapServers\":\"my-cluster-kafka-bootstrap:9093\",\"tls\":{\"trustedCertificates\":[{\"secretName\":\"my-cluster-cluster-ca-cert\",\"certificate\":\"ca.crt\"}]}}},\n      {\"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\"kind\":\"KafkaTopic\",\"metadata\":{\"name\":\"my-topic\",\"labels\":{\"strimzi.io/cluster\":\"my-cluster\"}},\"spec\":{\"partitions\":10,\"replicas\":3,\"config\":{\"retention.ms\":604800000,\"segment.bytes\":1073741824}}},\n      {\"apiVersion\":\"kafka.strimzi.io/v1alpha1\",\"kind\":\"KafkaUser\",\"metadata\":{\"name\":\"my-user\",\"labels\":{\"strimzi.io/cluster\":\"my-cluster\"}},\"spec\":{\"authentication\":{\"type\":\"tls\"},\"authorization\":{\"type\":\"simple\",\"acls\":[{\"resource\":{\"type\":\"topic\",\"name\":\"my-topic\",\"patternType\":\"literal\"},\"operation\":\"Read\",\"host\":\"*\"},{\"resource\":{\"type\":\"topic\",\"name\":\"my-topic\",\"patternType\":\"literal\"},\"operation\":\"Describe\",\"host\":\"*\"},{\"resource\":{\"type\":\"group\",\"name\":\"my-group\",\"patternType\":\"literal\"},\"operation\":\"Read\",\"host\":\"*\"},{\"resource\":{\"type\":\"topic\",\"name\":\"my-topic\",\"patternType\":\"literal\"},\"operation\":\"Write\",\"host\":\"*\"},{\"resource\":{\"type\":\"topic\",\"name\":\"my-topic\",\"patternType\":\"literal\"},\"operation\":\"Create\",\"host\":\"*\"},{\"resource\":{\"type\":\"topic\",\"name\":\"my-topic\",\"patternType\":\"literal\"},\"operation\":\"Describe\",\"host\":\"*\"}]}}}]',\n    categories: 'kafka,messaging,streaming', certified: 'false', containerImage: 'docker.io/strimzi/cluster-operator:0.9.0',\n    createdAt: '<2018-12-13T18:22:00Z>', description: Strimzi provides a way to run\n      an Apache Kafka cluster on Kubernetes or OpenShift in various deployment configurations.,\n    support: Strimzi}\n  name: strimzi-cluster-operator.v0.9.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: Represents a Kafka Connect cluster, displayName: Kafka Connect,\n      kind: KafkaConnect, name: kafkaconnects.kafka.strimzi.io, version: v1alpha1}\n    - {description: Represents a user inside a Kafka cluster, displayName: Kafka User,\n      kind: KafkaUser, name: kafkausers.kafka.strimzi.io, version: v1alpha1}\n    - {description: Represents a Kafka Connect cluster with Source 2 Image support,\n      displayName: Kafka Connect Source to Image, kind: KafkaConnectS2I, name: kafkaconnects2is.kafka.strimzi.io,\n      version: v1alpha1}\n    - {description: Represents a Kafka MirrorMaker cluster, displayName: Kafka Mirror\n        Maker, kind: KafkaMirrorMaker, name: kafkamirrormakers.kafka.strimzi.io, version: v1alpha1}\n    - {description: Represents a Kafka cluster, displayName: Kafka, kind: Kafka, name: kafkas.kafka.strimzi.io,\n      version: v1alpha1}\n    - {description: Represents a topic inside a Kafka cluster, displayName: Kafka\n        Topic, kind: KafkaTopic, name: kafkatopics.kafka.strimzi.io, version: v1alpha1}\n  description: '# Run Apache Kafka on Kubernetes and OpenShift\n\n    Strimzi provides a way to run an [Apache Kafka][kafka] cluster on  [Kubernetes][k8s]\n    or [OpenShift][os] in various deployment configurations. See our [website][strimzi]\n    for more details about the project.\n\n    ## Documentation\n\n    Documentation to the current _master_ branch as well as all releases can be found\n    on our [website][strimzi].\n\n    ## Getting help\n\n    If you encounter any issues while using Strimzi, you can get help using:\n\n    - [Strimzi mailing list](https://www.redhat.com/mailman/listinfo/strimzi) - [Strimzi\n    Slack workspace](https://join.slack.com/t/strimzi/shared_invite/enQtMzU2Mjk3NTgxMzE5LTYyMTUwMGNlMDQwMzBhOGI4YmY4MjhiMDgyNjA5OTk2MTFiYjc4M2Q3NGU1YTFjOWRiMzM2NGMwNDUwMjBlNDY)\n\n    ## Contributing\n\n    You can contribute by: - Raising any issues you find using Strimzi - Fixing issues\n    by opening Pull Requests - Improving documentation - Talking about Strimzi\n\n    All bugs, tasks or enhancements are tracked as [GitHub issues](https://github.com/strimzi/strimzi-kafka-operator/issues).\n    Issues which  might be a good start for new contributors are marked with [\"good-start\"](https://github.com/strimzi/strimzi-kafka-operator/labels/good-start)\n    label.\n\n    The [Hacking guide](https://github.com/strimzi/strimzi-kafka-operator/blob/master/HACKING.md)\n    describes how to build Strimzi and how to  test your changes before submitting\n    a patch or opening a PR.\n\n    The [Documentation Contributor Guide](http://strimzi.io/contributing/guide/) describes\n    how to contribute to Strimzi documentation.\n\n    If you want to get in touch with us first before contributing, you can use:\n\n    - [Strimzi mailing list](https://www.redhat.com/mailman/listinfo/strimzi) - [Strimzi\n    Slack workspace](https://join.slack.com/t/strimzi/shared_invite/enQtMzU2Mjk3NTgxMzE5LTYyMTUwMGNlMDQwMzBhOGI4YmY4MjhiMDgyNjA5OTk2MTFiYjc4M2Q3NGU1YTFjOWRiMzM2NGMwNDUwMjBlNDY)\n\n    ## License Strimzi is licensed under the [Apache License](./LICENSE), Version\n    2.0\n\n    [strimzi]: http://strimzi.io \"Strimzi\" [kafka]: https://kafka.apache.org \"Apache\n    Kafka\" [k8s]: https://kubernetes.io/ \"Kubernetes\" [os]: https://www.openshift.com/\n    \"OpenShift\"\n\n    '\n  displayName: Strimzi\n  icon:\n  - {base64data: ,\n    mediatype: image/png}\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [serviceaccounts]\n          verbs: [get, create, delete, patch, update]\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [rolebindings]\n          verbs: [get, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: [kafka.strimzi.io]\n          resources: [kafkas, kafkaconnects, kafkaconnects2is, kafkamirrormakers]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [get, list, watch, delete]\n        - apiGroups: ['']\n          resources: [services]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [endpoints]\n          verbs: [get, list, watch]\n        - apiGroups: [extensions]\n          resources: [deployments, deployments/scale, replicasets]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: [apps]\n          resources: [deployments, deployments/scale, deployments/status, statefulsets]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create]\n        - apiGroups: [extensions]\n          resources: [replicationcontrollers]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: [apps.openshift.io]\n          resources: [deploymentconfigs, deploymentconfigs/scale, deploymentconfigs/status,\n            deploymentconfigs/finalizers]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: [build.openshift.io]\n          resources: [buildconfigs, builds]\n          verbs: [create, delete, get, list, patch, watch, update]\n        - apiGroups: [image.openshift.io]\n          resources: [imagestreams, imagestreams/status]\n          verbs: [create, delete, get, list, watch, patch, update]\n        - apiGroups: ['']\n          resources: [replicationcontrollers]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get, list, create, delete, patch, update]\n        - apiGroups: [extensions]\n          resources: [networkpolicies]\n          verbs: [get, list, watch, create, delete, patch, update]\n        - apiGroups: [route.openshift.io]\n          resources: [routes]\n          verbs: [get, list, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [persistentvolumeclaims]\n          verbs: [get, list, create, delete, patch, update]\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [clusterrolebindings]\n          verbs: [get, create, delete, patch, update]\n        - apiGroups: ['']\n          resources: [nodes]\n          verbs: [get]\n        - apiGroups: [kafka.strimzi.io]\n          resources: [kafkatopics]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create]\n        - apiGroups: [kafka.strimzi.io]\n          resources: [kafkausers]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get, list, create, patch, update, delete]\n        - apiGroups: [kafka.strimzi.io]\n          resources: [kafkatopics]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create]\n        serviceAccountName: strimzi-cluster-operator\n      deployments:\n      - name: strimzi-cluster-operator\n        spec:\n          replicas: 1\n          strategy: {type: Recreate}\n          template:\n            metadata:\n              labels: {name: strimzi-cluster-operator}\n            spec:\n              containers:\n              - env:\n                - name: STRIMZI_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - {name: STRIMZI_FULL_RECONCILIATION_INTERVAL_MS, value: '120000'}\n                - {name: STRIMZI_OPERATION_TIMEOUT_MS, value: '300000'}\n                - {name: STRIMZI_DEFAULT_ZOOKEEPER_IMAGE, value: 'strimzi/zookeeper:0.9.0'}\n                - {name: STRIMZI_DEFAULT_KAFKA_IMAGE, value: 'strimzi/kafka:0.9.0'}\n                - {name: STRIMZI_DEFAULT_KAFKA_CONNECT_IMAGE, value: 'strimzi/kafka-connect:0.9.0'}\n                - {name: STRIMZI_DEFAULT_KAFKA_CONNECT_S2I_IMAGE, value: 'strimzi/kafka-connect-s2i:0.9.0'}\n                - {name: STRIMZI_DEFAULT_KAFKA_MIRRORMAKER_IMAGE, value: 'strimzi/kafka-mirror-maker:0.9.0'}\n                - {name: STRIMZI_DEFAULT_TOPIC_OPERATOR_IMAGE, value: 'strimzi/topic-operator:0.9.0'}\n                - {name: STRIMZI_DEFAULT_USER_OPERATOR_IMAGE, value: 'strimzi/user-operator:0.9.0'}\n                - {name: STRIMZI_DEFAULT_KAFKA_INIT_IMAGE, value: 'strimzi/kafka-init:0.9.0'}\n                - {name: STRIMZI_DEFAULT_TLS_SIDECAR_ZOOKEEPER_IMAGE, value: 'strimzi/zookeeper-stunnel:0.9.0'}\n                - {name: STRIMZI_DEFAULT_TLS_SIDECAR_KAFKA_IMAGE, value: 'strimzi/kafka-stunnel:0.9.0'}\n                - {name: STRIMZI_DEFAULT_TLS_SIDECAR_ENTITY_OPERATOR_IMAGE, value: 'strimzi/entity-operator-stunnel:0.9.0'}\n                - {name: STRIMZI_LOG_LEVEL, value: INFO}\n                image: strimzi/cluster-operator:0.9.0\n                imagePullPolicy: IfNotPresent\n                livenessProbe:\n                  httpGet: {path: /healthy, port: 8080}\n                  initialDelaySeconds: 10\n                  periodSeconds: 30\n                name: strimzi-cluster-operator\n                readinessProbe:\n                  httpGet: {path: /ready, port: 8080}\n                  initialDelaySeconds: 10\n                  periodSeconds: 30\n                resources:\n                  limits: {cpu: 1000m, memory: 256Mi}\n                  requests: {cpu: 200m, memory: 256Mi}\n              serviceAccountName: strimzi-cluster-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: true, type: MultiNamespace}\n  - {supported: false, type: AllNamespaces}\n  keywords: [kafka, messaging, enmasse, kafka-connect, kafka-streams, data-streaming,\n    data-stream, data-streams]\n  labels: {name: strimzi-cluster-operator}\n  links:\n  - {name: Strimzi Cluster Operator Source Code, url: 'https://github.com/strimzi/strimzi-kafka-operator'}\n  maintainers:\n  - {email: 'https://www.redhat.com/mailman/listinfo/strimzi', name: Strimzi}\n  provider: {name: Strimzi}\n  selector:\n    matchLabels: {name: strimzi-cluster-operator}\n  version: 0.9.0\n", "name": "Strimzi"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {categories: 'apache spark, apache, spark', certified: 'false', containerImage: 'quay.io/radanalyticsio/spark-operator:latest-released',\n    createdAt: !!timestamp '2019-01-17 12:00:00', description: An operator for managing\n      the Apache Spark clusters and intelligent applications that spawn those clusters.,\n    support: jkremser@redhat.com}\n  name: sparkoperator.v0.3.3\n  namespace: openshift-operators\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: Apache Spark cluster\n      displayName: Spark Cluster\n      kind: sparkcluster\n      name: sparkclusters.radanalytics.io\n      specDescriptors:\n      - description: The desired number of worker instances in the Spark cluster.\n        displayName: Instances\n        path: worker.instances\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      version: v1\n    - {description: Apache Spark application, displayName: Spark Application, kind: sparkapplication,\n      name: sparkapplications.radanalytics.io, version: v1}\n  description: \"**Apache Spark** is a unified analytics engine for large-scale data\\\n    \\ processing.\\n\\nUsage:\\n```\\n# create cluster\\ncat <<EOF | kubectl create -f\\\n    \\ -\\napiVersion: radanalytics.io/v1\\nkind: sparkcluster\\nmetadata:\\n  name: my-spark-cluster\\n\\\n    spec:\\n  worker:\\n    instances: 2\\nEOF\\n```\\n\"\n  displayName: Apache Spark Operator\n  icon:\n  - {base64data: ,\n    mediatype: image/png}\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: [radanalytics.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, replicationcontrollers, services, configmaps]\n          verbs: [create, delete, deletecollection, get, list, update, watch, patch]\n        - apiGroups: [apiextensions.k8s.io]\n          resources: [customresourcedefinitions]\n          verbs: [list]\n        serviceAccountName: spark-crd-operator\n      deployments:\n      - name: spark-operator\n        namespace: openshift-operators\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app.kubernetes.io/name: spark-operator, app.kubernetes.io/version: v0.3.3-v1alpha1}\n          template:\n            metadata:\n              labels: {app.kubernetes.io/name: spark-operator, app.kubernetes.io/version: v0.3.3-v1alpha1}\n            spec:\n              containers:\n              - env:\n                - {name: CRD, value: 'true'}\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'}\n                image: quay.io/radanalyticsio/spark-operator:latest-released\n                imagePullPolicy: Always\n                name: spark-operator\n                resources:\n                  limits: {cpu: 1500m, memory: 750Mi}\n              restartPolicy: Always\n              serviceAccount: spark-crd-operator\n              serviceAccountName: spark-crd-operator\n              terminationGracePeriodSeconds: 5\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [spark]\n  labels: {alm-owner-enterprise-app: spark-operator, alm-status-descriptors: spark-operator.v0.3.3}\n  maintainers:\n  - {email: jkremser@redhat.com, name: 'Red Hat, Inc.'}\n  maturity: alpha\n  provider: {name: Radanalytics.io, url: www.radanalytics.io}\n  version: 0.3.3\n", "name": "Apache Spark Operator"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"app.kiegroup.org/v1\",\"kind\":\"KieApp\",\"metadata\":{\"name\":\"trial\"},\"spec\":{\"environment\":\"trial\"}}]',\n    categories: 'kieapp, rhpam, kie, cloud, pam, kiecloud', certified: 'false', containerImage: 'quay.io/kiegroup/kie-cloud-operator:v0.1.0',\n    createdAt: !!timestamp '2019-01-23 17:30:36', description: KieCloud can deploy\n      RHPAM environments in the form of KieApp objects., support: 'Red Hat, Inc.',\n    tectonic-visibility: ocs}\n  labels: {operator-kiecloud: 'true'}\n  name: kiecloud-operator.v0.1.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: An instance of KieApp\n      displayName: KieApp\n      kind: KieApp\n      name: kieapps.app.kiegroup.org\n      resources:\n      - {kind: DeploymentConfig, version: apps.openshift.io/v1}\n      - {kind: Secret, version: v1}\n      - {kind: PersistentVolumeClaim, version: v1}\n      - {kind: ServiceAccount, version: v1}\n      - {kind: Role, version: authorization.openshift.io/v1}\n      - {kind: RoleBinding, version: authorization.openshift.io/v1}\n      - {kind: Service, version: v1}\n      - {kind: Route, version: route.openshift.io/v1}\n      specDescriptors:\n      - description: Environment of PAM to deploy.\n        displayName: Environment\n        path: environment\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:label']\n      - description: PAM version to be installed.\n        displayName: Version\n        path: commonConfig.version\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:label']\n      statusDescriptors:\n      - description: Deployments for the KieApp environment.\n        displayName: Deployments\n        path: deployments\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The address for accessing workbench, if it is deployed.\n        displayName: Workbench URL\n        path: consoleHost\n        x-descriptors: ['urn:alm:descriptor:org.w3:link']\n      version: v1\n  description: KieCloud can deploy RHPAM environments in the form of KieApp objects.\n  displayName: KieCloud\n  icon:\n  - {base64data: iVBORw0KGgoAAAANSUhEUgAAAIIAAABlCAYAAACBQjvHAAAABHNCSVQICAgIfAhkiAAAFsJJREFUeJztnXd0XNWdx3/3vTe9qI1GGvUuI9mSJfcKbuACGBNCSSXJ2c1uzklI25yzm+QkgU1C2pLdUFL2AEkgIWAvxRgMBhthG9yRbclFlq0ykkbSaHp98967v/1jVEGSPZonWxrN5xydGc27c9+99/d9v9vvACRJkiRJkiRJknwScqMTMIdREAAOCHAAhGEIKDmG0Rs0imyjWpHmDPA2dzDSBADC9UhMUgjywgCAgiFEpVJw6dlp+vzS7PQilYLVEQAVxxBjmk5VWFecveim3LQCoEgAEQAoQYqEoEQYAI4BykgSFbscPtveJuvLjVbnO6393hMiRdd0JTwphNhRKDg2JcOoy87JSLEoONaoUynzqwuzltSX5s7TKBVqgpRlGaLRKxXGVJ3KwDHAIqUAQAGQAtLoKyACIAKiBDD0GR36fDAsSuAM8F6HN2Tbfbpzz7le71uX7f4zIUHqAwCUK1NJIYwPIYQoVQpOa9RpUpUKzpRh1FUsqihaWl1kKVOybJo5TZ9fYE7NVrIM9wkDUgo4aORhg8YhBEAcvu4N88ELNu+5o+2OhkOt9lf6fHxzWKReAJDiyrA85TarIYQQhmUYjU6jKqmrKFpdV1lcrVersrLSDKULyvIrjWqVJmoUBKDSKAOOGPd6CQFHhUGU4MMrjlPn+ryH9jT3v2j3R05KiOEpFYK8ZTorYDiWTbNkplcvriqry0jRl84rzF22qnbeQq1SocRRhkCgHzPCzBNCNFw0zMU+X+e7lxw7D7W5d3e6w8coQvBaCyXRhcBwLJuSmZ5aPL+8qCbHlL7olsU1a/OyMrKUClan16q1HAAzxiizWAhD9/CGBH+fN9Szq2ngueNW3+u9fuEsAIiTFVRCCYEQojLqdWaLOaOwINu8Yt2yhWtyzabcFIM2uzA7y8IQJDiqUAFGvR9PCB8LM64QhsQwiRCGDR+3ECQYSf/EQojGI4EkUdrlCdk+6vYffuGs84kub+RDxPG7o9x1tJPcEJZhlFqtxmjUacvWLFm4ub66si43yzSvuqyolCWEGSlMHC702O4AV2+XX0MYQmK/9ZRvNupGLEOYwlRVbqFRca+WI+ZHD/Z+npewa7yvzUYhKMym9LpNa5bfWpSXU7d6ce3a/KxMEwAOPzk49LTNZq5FYFcPAgAAR6z+E09/5PgRL6FtojAzXgiEEFV6akrFsrqaFQV5lsVbblm1JT8n28wxRMEAISMu98alkSIBikzU8wABCgxIgADDfxSA4HD1QAkAAgUGov8jIABDgaAESgwDQbym/IwbZJT7ae4LXtzVZP/TO63eJ67Wm5iJQmC0Gk3WvLKS2sqy4lt2bLt1q1GnNWWb0jMVHMt9oi6XAQrRqCQKQCkBijj4SkCgBBAJCJQFiggS5UBCAogIwuDtETFqlMH0DP8PONgKw0EhRN9H7YxRgw+FG8yXggqgk3ygkQKgEkPADrVTrhEfL4ZOdXmP7m4eeO58f3CfOyxaryWCGSEEjuP0mab0nMyMjPlbNty8vaaqsm5eWXGFRqVSjTTchp6oawcRgSIApTj8J0gUBImCKFEQKEKEIlAKQBFAotERX4pM9HvIDkUElFIMhoLBQDDkoRLlMZooGLbuYLiR19HvCRkyNiHAsgyj0mrUKRqVSsMwJHpTAgAEQSIshFk1EMwApcSDSgqCVvSCRvADS3kgE5jUGRTdJ6yu47tO9z1+vj/wnkjRG5MNYipZGSGEMGq1Km/jLWvvWbVs0frli+pWZZkyUmMxPI5+g1Ej84IIEVECXqAgSBKIlEJElFAQJSpEH3UcfloRoMvWa2s613LC6/O2iaLoRgQJonWNNHgDEQEppVTqtvV1W3tsF8J8ZAARR7e+r/bYskNvGIao1EqVKc9irswxm3IYhuEIAAOALETlwAIAyxCi0qpVecW52XWVxQWVGjVyGtEHetFDtBEPcMgToAh2P+/Z09y7s+Gy88VWe+AgAkRiMsQg17v7yGaaMhZsXLd2a33tgttuv+3WtQBD3bHBen50Vw1HulI42F2LRATgRQkighg1ekREXpIIL0jAi6LY2nrlcld39zme53spRZ4Aih6fz914pvm4w+VuiRobIxAdkhUgasSZDgPRh5YjhKiVHJeeplMVAhVpny98FGMYOJqIaRcCwzCaHIulalFd7S3bbtv06eqqygqjQW9UsCyLFGGMECgOuuGooQVRAD4iQjgiQIgXwO50+TutXe0+n79bkqRgd29vz9mmc8cdLtc5KkkeihgOh8P+SEQIUkoFgDEttiSTMC1VA8uy+uKiwpvmVVasu3vH9rsK83JK8ywWc7ShNDKQAoDRuloUQYwIEAzz2GPr8/YNDPSFQmGP3eFyHj1+4vCAw9EkSZIjGAp5XC63ned556BrjmuiJckIsgmBZVlVampq3pJF9du2bd28rW5hzTKzyZQyNPqGFAEpgkQphEIhyeFwhbyBAO/xeIJHjp04daWt40QkEunusfVabb22Szwf6cdolyf5NF8H4hYCwzDaysrKjZ954L4Hb9+2ZYtOq1Uj0sG+MIIgiBgMBYnD6Yq813Dw6OUr7Sf67PYr586dP+VyuS5SSj1wlXHwJNPPlNoIhBBlaWnpyjVr19xx1/btd5eVleRxLMMSABIOh8FuHwidOHnirNXaffHY8RNHL1y4eDgcDreLohiglIqQfMpnHLEIgdFqtZbq+fNvvvf+ex9cs2r10pTUFIPb6Qxfar3Ubu20tjU0vH/k0qXWD/1+f6fH4xmIRCI+SD7ts4KrCoEQotRoNJai4qLVGzZuunP9hg1LqSSFPzh8qKm5ufmo1Wo9097W3hIMBnsGu2WTwQz+ASFAogMt44M4PIggQdKDTDuTCYFTqVR5ZrN5kTkrqxwAwoFAoHPAbm93uVztkiS54BoMRAhhDHp9/qoVyz61cvmSWgaIAgEZgpQQABZGjRfgyJgBAqUSRUo9Hq97/wfHDre2Wxv8wVAvIiY9zDQwkRA4juMsCoVCj4gCz/M9iBjzoAXHccbPPnDf9778xc9+LdtkSsPBefKRef3B+Xc6et5dGp6vRyoNz8O73B7frjf3v/ziG+8+2dM/cAySXkJWJvMI1zrLOS4pKcaCf//ed/9w5x1bN7EEWJCGVtdMJoTB9+MIASgFSiUMBkKhF/bs2/Xim/sf6+l3NMaTxiQjsFcPEjsGgyH3xz/8/l+2bt28nmMYdnh2bfgVxv6PowYAEce/hggECFFwrKL+prLapQsqN7m9PrHTZr9AKZ3S+HqSEWQXglqtTv/Ot7/5xKfvuXsbS4AZY+A4hTD8PUTISDWmrVm0YENeVkZ944XLR8J8xC13XuYScguBueuu7Q9951sPfX1cA19VCHDNQgBAULAMV1mYV7G8Zt7tJ5ovNrp9gQ6Z8zNnkFUIVVVVtz788E9+bdDrtKMNhogQDIbA6faAy+sHry8AFy61dn5w9FhDUV5OgVKhUMTqEUZfN6UY0tctWbD9UkePrbvfcVbOPM0VZBOCUqlMe+SRh/+4YH51xZCREBH8gQBYe3qh1z4AHl8ABhzO0Cu79zz/28d//+C+Awf/smffgV0UqaYw11KiUQ8tRIlNCIAIeo1Ks7CyeEVrZ7et2+5skitfcwXZhLBjx46HvvCFz32OZaONQypJ0GcfAGuPDUKhMCBSCIVD4b///R+/3vPG3h+EQqF+RBS8Pn//keOn9p46c+5MTfW8FakGQwoBILEKAQAhRafR11eWrG7p7O7psbuaIdmjuGZkEYJKrc567LH/ejYjPT0FAEGSJOjs7ob+/gGgNDpAKIqi9MILLz62/8B7j0iSNGZMAhElW7/94v5DR94qyc9blpeTbWEIkFiFAIBg1Gp0K+aXrz/T0n6p3+W9BLNj4ckNRw4hMPc/cP+/3XHH7VsYQgilFLp7bGAfGBg2HkWK7757YNfLr7z6dUopP1FEgWBw4PDxU/sKci1LSgvzC6YiBEAEnVqlXja/fOP59q4O24CrWYY8JjxxC8FgMGT/7NFH/5ienmZAROjv7webbeyO7fPnL5x58qnf3ytJkv9q8YX5iPvIydPvmE3pCypKCkumIoShNsPy6rJ1l7t7+7v6nafjzWeiE7cQbtu8+Z/uf+D+TwEgeD0e6OrqBkpHFg653W7X008/+0273f7RtcbJRyLeM+dbjhbkWhYX5+XkT0UIgAh6tVJTU5a/rK2nv7/L7joTb14TGSaeL6vV6ow77rrrbgAAURShu7sHRGFkTohSSl9/fc//trS07Ik17n6Hs+Xh//7DV7r77f3xpDE/MyP7J1/51G8XlhfcQ0h8+U1k4iqY8ory+iVLlywGAOi32yEYDI25fuVK24WDBw89PtUZQ7vDdf6Hv3ri2z5/MBBPOs1phrRHvrzjcUtG6pJ44klk4hECc98Dn/mqQa9X8zwPfb19nwiwc+fOX/h8vs447gHHTjc//9Tzu54QJSmuhaq5mWnm33ztvr9mpRmr4oknUZmyENLS0soWLVm8CBGht7cPPm6n042nj1282LI77hQCwIt79v1y/4cnG+KNpzw3q+xf77z5VxqVwiRHuhKJKQth5erV64uKivP4CA9Op2PMNUEQhTfeePN/eJ6X5RSwMB9xPPX8rh919fZPuJt3NDjBOBLDALltSfWmz21c+gghRClH2hKFKQth6fLlWzmFgnMMOEASxzYBWltbLzQ1Ne2MO3WjuNRu/fB3f3npN9LQCNUkkEmWWagUrOLB21Z+6ZaasgchwQ4KiYcpCUGhVGbfvn372gjPg9PhhNHlGREEYe/evb9DxAkHjqaItO/w8T8cOHIq7ipCreBU37tv0y9y0o3JxuMgUxLCilWrNmo0Gq3H44FweOweFIfD0dPY2PiqXAkcTUQQ/P/55J+/4fYGrjowdTXMqfrUn37p9mcyDNpyOdI224lZCIQQpq6+fiXLspzD4YCPz+u839DwaiQSiavvPxkOt6fpyb+9/FtBEONexFpTnFP1z1tX/kzBsUY50jabiVkIHMepFy9ddnMoGCTh0NhxA5fL6WpsbPw/2VI3Abvf++Cpc1c6zskR1+ZFlVvX15R+CeZ4eyFmIaSkpJauXL2qyuN2gyiMPaCrra290Wq1npItdRPgD4Z6Hn/u5Z8HQ+Fxj4OZqNcwHnq1UvuNO1d/P8+UMqfbCzEL4bZtW+9GRHA6naM+jT5M7zc0vCJJkk+uxE3G8aYLr7558Nje8a5N1msYj6w0Q+YP7lv3J4YQvSyJm4XEJASGYVS1dfW1AX8AIvzoTgFCIBAIXLly5R2Z0zchlGLoz6/t+4XL4/uE8GLxCEPUl+Qt+OKG+p8zhChkSeAsIyYh6PX6tMLi4mqvxwMf786fO3fupNvtHvcMv+nC2tvfuOudg3+TIy6GAPn8LbUPVuSY1skR32wjJiGoNVqt2WzO8Hg8Yz6niHjq5Kk3BUG4LtXCEJJEw0+//NZPe+zOgdGfx1o1DGHUqPX/snnJw0aNqkCWBM4iYlqPIEoiVN500zqNWlVEKUVEBFEUpQP7333j9d27f0Qpjfssn1gRRNHrDwSVqxZWr2UZwoxZozDRcvoJF8ci5GcY8oI8z37U1vs2zKE1jzE/OizLppWWl2/Jz88vam9ra+3s6PhQEIQuuIGFxrJM2tM//uahhRWFVcNb6OjQ9rrBA9KkoS11Q3srB7fTDYUZvI5UApcv4P3WM299vtlqf+1G5el6E/MKJUQMOwYGzrZduXLQ5XQ2U0pjOs9vOkDEcDAc5tbUVW9QsAwbj0cARNAoWVVRpnH+vtNtu0RK41oLMVuYlr2PN4LeAZe1rqJkfZ45PQeHjuqbohAAEEx6jUkQRU1jR9+cqCISRgiCKPn8obBi0/LaLQSAxCsEQpCZl5te+/bp9rf94Uj3jcvZ9SFhhAAAYHd5OmvLijblZaZnx1M1DL0qWcLlpevmHbzQ9Zoo0dAkt571JJQQBFEKegNBsnnlwm3xeoSha7mp+twOu8fe2uc+cuNyNv0klBAAAAbcPuvy6vId5jRjuhxCYAgween6iiOtPe/7wkLvDczatJJwQhAlMZxmNOQvvql0BQEk8QoBECFdp0oTJao9fqV3NyToFrqEW+ePCNJL73zwp4ggyrpCant98Y6qnPRb5YxzJpFwHgEAgBcER6pBs6CmtGC+HB4BEEHFEWVumq7mzTMdz0ACnh2ZkEIAALA53L3rFlXfqVMrtXIIAYBCdorWbB3weS73e49Ago0tJKwQPP6AzWJKXbigJH++XEIgiKQ4U1914Hz37lBEck52/9lGwgoBAKjTG3BvWFx9t1rJKeUQAiBCqkZhlCjVnGwfeBsT6GcCEq6xOJqWTtvRCx09su+C3laTf2+Z2bBK7nhvJInsEQARI55AiN26vOYOuTwCIIJWwah0SjanoaVvJyZIwzGhhQAA4PYHe2vLCjZb0o1muYQAiGBJUedc6vd2Wp2BxhuaQZlIeCHwghhgGSbt5tqK9XIKQcESRX6qpmJvc88/JBr7OdUzjYRuIwxC9x49/awkUdkbduWZhvLN1ZavQgKUY8J7BAAAUaI+g1ZVVVOaN18ujwCAwAIwxRm6mjeaep6LSPS6rteUmzkhBAAATyAUvHVJ1Q4lxyrkEgIggkHNap0BXmy2eQ/ALB5kmvUu7Vq50Glr6LK7rdMR9+3zLfdn6JQl0xH39WLOeAREEARRNKyuKV/HTHiya+wegQBCukaR2usNBc73+t6DWeoV5owQAADc/pB39fzSO9L0mhS5hDD0mp+iLjnS4WzwhMWeG5nHqTKnhBAI8/YSS+bi6kLLArmFYFSxBq2CyX3/suMlmIVrFuZMG2EQ+urhxmdDEWFafvFlbWn6zfOz9ZunI+7pZq4JAdp6HScbL1tlGw0c3SDQqzjd/fU534VZ6GnnnBDCEcH5/plL426nl4Oby9JXlWRo1k9X/NPFnBMCAODbx88/M+AJyLJD6+N7BllC2K8szfsPBUt0csR/vZiLQgBvMNzz9qkLr8sR13h9xTXFKWvKTdpZ5RVmXV0mBwgghfgIs3Vp1d3Dv0QXxzjCmM8AgQAweiVj+qDD87pEcdzjfWYac9IjAACcbbPt84f4advguqzQuKbKrJ01h27MSY8AAICIvErBFdWX5S0igCTecYTRHgEQQckAZ1Axlv2X3S8igDBJUmYEc1YIAADuQMi/rqb0Tp1KoZFbCAAIJg2bddEevNTtjcz4nyCcs1UDAEB7r/PoFZujZbri1ykZ9T0LMh4iADP+gK457REQQJQoTVu3oGTjmJ8YjMEj4CQeAZCCWc9lnujyf2QPiBdvZF6vxpwWAgCAN8g7a4ssG7JS9Zly9RpGC4EDZDUKkn2ow/8SxZnbVpjzQgjyEceJ1q6TOrWyoDLXVCpnGwEw+p2SVEXxvsve/Z6w1HYDszopc14IAAC+EN91sLn9hb+9f+avHf1uGy+IaDJostQco5RDCIAUNBzoDnUEXoEZOjOZFMIgCEAjouRs6XEcPnje+tr+s+2vHL9sO69RKDh/OCKoFaxOxTKKqQqhxxtxNnQEdlKEGTnANKdPJL9GFHq1wlJkMlZYUrULlxWb1lVbUsvVHDEalUyKTknUKEmDx/RJMHKUnwRARaBUQk+Q9z15pO83b7Z6H0WEaZkCj5ekEGKHMIQYUjSKospsY3VeqqZAQUi6Wa+orMs11hVnqCwgSRCKCJETna6m5r7AoVPd/ndaHOH9M1UEAEkhTAcsRMuVwgxtDyRJkiRJkiRJklwr/w87M8LF9XFPYwAAAABJRU5ErkJggg==,\n    mediatype: image/png}\n  install:\n    spec:\n      deployments:\n      - name: kie-cloud-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: kie-cloud-operator}\n          strategy: {type: Recreate}\n          template:\n            metadata:\n              labels: {name: kie-cloud-operator}\n            spec:\n              containers:\n              - command: [kie-cloud-operator]\n                env:\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                - {name: OPERATOR_NAME, value: kie-cloud-operator}\n                image: quay.io/kiegroup/kie-cloud-operator:v0.1.0\n                imagePullPolicy: Always\n                name: kie-cloud-operator\n                ports:\n                - {containerPort: 60000, name: metrics}\n                readinessProbe:\n                  exec:\n                    command: [stat, /tmp/operator-sdk-ready]\n                  failureThreshold: 1\n                  initialDelaySeconds: 4\n                  periodSeconds: 10\n              serviceAccountName: kie-cloud-operator\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events, configmaps,\n            secrets, serviceaccounts]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments, daemonsets, replicasets, statefulsets]\n          verbs: ['*']\n        - apiGroups: [app.kiegroup.org, apps.openshift.io, image.openshift.io, build.openshift.io,\n            route.openshift.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [roles, rolebindings]\n          verbs: ['*']\n        - apiGroups: [monitoring.coreos.com]\n          resources: [servicemonitors]\n          verbs: [get, create]\n        serviceAccountName: kie-cloud-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [kieapp rhpam kie cloud pam kiecloud]\n  labels: {alm-owner-kiecloud: kiecloud-operator, operated-by: kiecloud-operator.v0.1.0}\n  links:\n  - {name: Product Page, url: 'https://access.redhat.com/products/red-hat-process-automation-manager'}\n  - {name: Documentation, url: 'https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.2/html-single/installing_and_configuring_red_hat_process_automation_manager_on_red_hat_jboss_eap_7.2/'}\n  maintainers:\n  - {email: bsig-cloud@redhat.com, name: 'Red Hat, Inc.'}\n  maturity: beta\n  provider: {name: 'Red Hat, Inc.'}\n  selector:\n    matchLabels: {alm-owner-kiecloud: kiecloud-operator, operated-by: kiecloud-operator.v0.1.0}\n  version: 0.1.0\n", "name": "KieCloud"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {categories: 'openshift optional, service catalog, osb, osbapi, broker,\n      svcat', certified: 'false', containerImage: quay.io/openshift/origin-service-catalog,\n    createdAt: !!timestamp '2018-12-01 00:00:00', description: Service Catalog lets\n      you provision cloud services directly from the comfort of native Kubernetes\n      tooling. This project is in incubation to bring integration with service brokers\n      to the Kubernetes ecosystem via the Open Service Broker API., support: AOS Service\n      Catalog}\n  name: svcat.v0.1.34\n  namespace: placeholder\nspec:\n  apiservicedefinitions:\n    owned:\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ClusterServiceClass, group: servicecatalog.k8s.io,\n      kind: ClusterServiceClass, name: clusterserviceclasses, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ClusterServicePlan, group: servicecatalog.k8s.io,\n      kind: ClusterServicePlan, name: clusterserviceplans, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ClusterServiceBroker, group: servicecatalog.k8s.io,\n      kind: ClusterServiceBroker, name: clusterservicebrokers, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ServiceInstance, group: servicecatalog.k8s.io,\n      kind: ServiceInstance, name: serviceinstances, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ServiceBinding, group: servicecatalog.k8s.io,\n      kind: ServiceBinding, name: servicebindings, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ServiceClass, group: servicecatalog.k8s.io,\n      kind: ServiceClass, name: serviceclasses, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ServicePlan, group: servicecatalog.k8s.io,\n      kind: ServicePlan, name: serviceplans, version: v1beta1}\n    - {containerPort: 5443, deploymentName: svcat-apiserver, description: A service\n        catalog resource, displayName: ServiceBroker, group: servicecatalog.k8s.io,\n      kind: ServiceBroker, name: servicebrokers, version: v1beta1}\n  description: Service Catalog lets you provision cloud services directly from the\n    comfort of native Kubernetes tooling. This project is in incubation to bring integration\n    with service brokers to the Kubernetes ecosystem via the Open Service Broker API.\n  displayName: Service Catalog\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create, patch, update]\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get, create, update, delete, list, watch, patch]\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [get, list, update, patch, watch, delete, initialize]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get, list, watch]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterserviceclasses]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterserviceplans]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterservicebrokers]\n          verbs: [get, list, watch]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [serviceinstances, servicebindings]\n          verbs: [get, list, watch, update]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterservicebrokers/status, clusterserviceclasses/status,\n            clusterserviceplans/status, serviceinstances/status, serviceinstances/reference,\n            servicebindings/status, servicebindings/finalizers]\n          verbs: [update]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [serviceclasses]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [serviceplans]\n          verbs: [get, list, watch, create, patch, update, delete]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [servicebrokers]\n          verbs: [get, list, watch]\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [servicebrokers/status, serviceclasses/status, serviceplans/status]\n          verbs: [update]\n        serviceAccountName: service-catalog-controller\n      - rules:\n        - apiGroups: ['']\n          resourceNames: [extension-apiserver-authentication]\n          resources: [configmaps]\n          verbs: [get]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get, list, watch]\n        - apiGroups: [admissionregistration.k8s.io]\n          resources: [validatingwebhookconfigurations]\n          verbs: [get, list, watch]\n        - apiGroups: [admissionregistration.k8s.io]\n          resources: [mutatingwebhookconfigurations]\n          verbs: [get, list, watch]\n        - apiGroups: [authentication.k8s.io]\n          resources: [tokenreviews]\n          verbs: [create]\n        - apiGroups: [authorization.k8s.io]\n          resources: [subjectaccessreviews]\n          verbs: [create]\n        serviceAccountName: service-catalog-apiserver\n      deployments:\n      - name: svcat-apiserver\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app: svcat-apiserver}\n          strategy: {type: RollingUpdate}\n          template:\n            metadata:\n              labels: {app: svcat-apiserver}\n            spec:\n              containers:\n              - args: [apiserver, --enable-admission-plugins, 'NamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck',\n                  --secure-port, '5443', --etcd-servers, 'http://localhost:2379',\n                  -v, '3', --feature-gates, OriginatingIdentity=true, --feature-gates,\n                  NamespacedServiceBroker=true]\n                command: [/usr/bin/service-catalog]\n                image: quay.io/openshift/origin-service-catalog:v4.0.0\n                imagePullPolicy: IfNotPresent\n                livenessProbe:\n                  failureThreshold: 3\n                  httpGet: {path: /healthz, port: 5443, scheme: HTTPS}\n                  initialDelaySeconds: 30\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 5\n                name: svcat-apiserver\n                ports:\n                - {containerPort: 5443}\n                readinessProbe:\n                  failureThreshold: 1\n                  httpGet: {path: /healthz, port: 5443, scheme: HTTPS}\n                  initialDelaySeconds: 30\n                  periodSeconds: 5\n                  successThreshold: 1\n                  timeoutSeconds: 5\n                resources:\n                  limits: {cpu: 100m, memory: 140Mi}\n                  requests: {cpu: 100m, memory: 40Mi}\n                volumeMounts:\n                - {mountPath: /var/run/kubernetes-service-catalog, name: apiservice-cert}\n              - command: [/usr/local/bin/etcd, --listen-client-urls, 'http://0.0.0.0:2379',\n                  --advertise-client-urls, 'http://localhost:2379']\n                env:\n                - {name: ETCD_DATA_DIR, value: /etcd-data-dir}\n                image: quay.io/coreos/etcd:latest\n                imagePullPolicy: Always\n                livenessProbe:\n                  failureThreshold: 3\n                  httpGet: {path: /health, port: 2379}\n                  initialDelaySeconds: 30\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 5\n                name: etcd\n                ports:\n                - {containerPort: 2379}\n                readinessProbe:\n                  failureThreshold: 1\n                  httpGet: {path: /health, port: 2379}\n                  initialDelaySeconds: 30\n                  periodSeconds: 5\n                  successThreshold: 1\n                  timeoutSeconds: 5\n                resources:\n                  limits: {cpu: 100m, memory: 150Mi}\n                  requests: {cpu: 100m, memory: 50Mi}\n                volumeMounts:\n                - {mountPath: /etcd-data-dir, name: etcd-data-dir}\n              serviceAccountName: service-catalog-apiserver\n              volumes:\n              - emptyDir: {}\n                name: etcd-data-dir\n      - name: svcat-controller-manager\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app: svcat-controller-manager}\n          strategy: {type: RollingUpdate}\n          template:\n            metadata:\n              labels: {app: svcat-controller-manager}\n            spec:\n              containers:\n              - args: [controller-manager, --secure-port, '8444', -v, '3', --leader-election-namespace,\n                  openshift-operators, --leader-elect-resource-lock, configmaps, --cluster-id-configmap-namespace=openshift-operators,\n                  --broker-relist-interval, 5m, --feature-gates, OriginatingIdentity=true,\n                  --feature-gates, AsyncBindingOperations=true, --feature-gates, NamespacedServiceBroker=true]\n                command: [/usr/bin/service-catalog]\n                env:\n                - name: K8S_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: quay.io/openshift/origin-service-catalog:v4.0.0\n                imagePullPolicy: IfNotPresent\n                livenessProbe:\n                  failureThreshold: 3\n                  httpGet: {path: /healthz, port: 8444, scheme: HTTPS}\n                  initialDelaySeconds: 20\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 2\n                name: svcat-controller-manager\n                ports:\n                - {containerPort: 8444}\n                readinessProbe:\n                  failureThreshold: 1\n                  httpGet: {path: /healthz, port: 8444, scheme: HTTPS}\n                  initialDelaySeconds: 20\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 2\n                resources:\n                  limits: {cpu: 100m, memory: 150Mi}\n                  requests: {cpu: 100m, memory: 100Mi}\n                volumeMounts:\n                - {mountPath: /var/run/kubernetes-service-catalog, name: apiservice-cert}\n              serviceAccountName: service-catalog-controller\n              volumes:\n              - name: apiservice-cert\n                secret:\n                  defaultMode: 420\n                  items:\n                  - {key: tls.crt, path: apiserver.crt}\n                  - {key: tls.key, path: apiserver.key}\n                  secretName: v1beta1.servicecatalog.k8s.io-cert\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resourceNames: [cluster-info]\n          resources: [configmaps]\n          verbs: [get, create, list, watch, update]\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [create, list, watch, get, update]\n        - apiGroups: ['']\n          resourceNames: [service-catalog-controller-manager]\n          resources: [configmaps]\n          verbs: [get, update]\n        serviceAccountName: service-catalog-controller\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [catalog, service, svcat, osb, broker]\n  links:\n  - {name: Documentation, url: 'https://svc-cat.io/docs'}\n  - {name: Service Catalog, url: 'https://github.com/openshift/service-catalog'}\n  maintainers:\n  - {email: openshift-operators@redhat.com, name: Red Hat}\n  provider: {name: Red Hat}\n  version: 0.1.34\n", "name": "Service Catalog"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"Prometheus\",\"metadata\":{\"name\":\"example\",\"labels\":{\"prometheus\":\"k8s\"}},\"spec\":{\"replicas\":2,\"version\":\"v2.3.2\",\"serviceAccountName\":\"prometheus-k8s\",\"securityContext\":\n      {}, \"serviceMonitorSelector\":{\"matchExpressions\":[{\"key\":\"k8s-app\",\"operator\":\"Exists\"}]},\"ruleSelector\":{\"matchLabels\":{\"role\":\"prometheus-rulefiles\",\"prometheus\":\"k8s\"}},\"alerting\":{\"alertmanagers\":[{\"namespace\":\"monitoring\",\"name\":\"alertmanager-main\",\"port\":\"web\"}]}}},{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"ServiceMonitor\",\"metadata\":{\"name\":\"example\",\"labels\":{\"k8s-app\":\"prometheus\"}},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"prometheus\"}},\"endpoints\":[{\"port\":\"web\",\"interval\":\"30s\"}]}},{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"Alertmanager\",\"metadata\":{\"name\":\"alertmanager-main\"},\"spec\":{\"replicas\":3,\n      \"securityContext\": {}}}]'}\n  name: prometheusoperator.0.22.2\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: A running Prometheus instance\n      displayName: Prometheus\n      kind: Prometheus\n      name: prometheuses.monitoring.coreos.com\n      resources:\n      - {kind: StatefulSet, version: v1beta2}\n      - {kind: Pod, version: v1}\n      - {kind: ConfigMap, version: v1}\n      - {kind: Service, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: A selector for the ConfigMaps from which to load rule files\n        displayName: Rule Config Map Selector\n        path: ruleSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:core:v1:ConfigMap']\n      - description: ServiceMonitors to be selected for target discovery\n        displayName: Service Monitor Selector\n        path: serviceMonitorSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:monitoring.coreos.com:v1:ServiceMonitor']\n      - description: The ServiceAccount to use to run the Prometheus pods\n        displayName: Service Account\n        path: serviceAccountName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:ServiceAccount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      version: v1\n    - {description: A Prometheus Rule configures groups of sequentially evaluated\n        recording and alerting rules., displayName: Prometheus Rule, kind: PrometheusRule,\n      name: prometheusrules.monitoring.coreos.com, version: v1}\n    - description: Configures prometheus to monitor a particular k8s service\n      displayName: Service Monitor\n      kind: ServiceMonitor\n      name: servicemonitors.monitoring.coreos.com\n      resources:\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: The label to use to retrieve the job name from\n        displayName: Job Label\n        path: jobLabel\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:label']\n      - description: A list of endpoints allowed as part of this ServiceMonitor\n        displayName: Endpoints\n        path: endpoints\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:endpointList']\n      version: v1\n    - description: Configures an Alertmanager for the namespace\n      displayName: Alertmanager\n      kind: Alertmanager\n      name: alertmanagers.monitoring.coreos.com\n      resources:\n      - {kind: StatefulSet, version: v1beta2}\n      - {kind: Pod, version: v1}\n      - {kind: Service, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      version: v1\n  description: 'The Prometheus Operator for Kubernetes provides easy monitoring definitions\n    for Kubernetes services and deployment and management of Prometheus instances.\n\n\n    Once installed, the Prometheus Operator provides the following features:\n\n\n    * **Create/Destroy**: Easily launch a Prometheus instance for your Kubernetes\n    namespace, a specific application or team easily using the Operator.\n\n\n    * **Simple Configuration**: Configure the fundamentals of Prometheus like versions,\n    persistence, retention policies, and replicas from a native Kubernetes resource.\n\n\n    * **Target Services via Labels**: Automatically generate monitoring target configurations\n    based on familiar Kubernetes label queries; no need to learn a Prometheus specific\n    configuration language.\n\n\n    ### Other Supported Features\n\n\n    **High availability**\n\n\n    Multiple instances are run across failure zones and data is replicated. This keeps\n    your monitoring available during an outage, when you need it most.\n\n\n    **Updates via automated operations**\n\n\n    New Prometheus versions are deployed using a rolling update with no downtime,\n    making it easy to stay up to date.\n\n\n    **Handles the dynamic nature of containers**\n\n\n    Alerting rules are attached to groups of containers instead of individual instances,\n    which is ideal for the highly dynamic nature of container deployment.\n\n    '\n  displayName: Prometheus Operator\n  icon:\n  - {base64data: PHN2ZyB3aWR0aD0iMjQ5MCIgaGVpZ2h0PSIyNTAwIiB2aWV3Qm94PSIwIDAgMjU2IDI1NyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCI+PHBhdGggZD0iTTEyOC4wMDEuNjY3QzU3LjMxMS42NjcgMCA1Ny45NzEgMCAxMjguNjY0YzAgNzAuNjkgNTcuMzExIDEyNy45OTggMTI4LjAwMSAxMjcuOTk4UzI1NiAxOTkuMzU0IDI1NiAxMjguNjY0QzI1NiA1Ny45NyAxOTguNjg5LjY2NyAxMjguMDAxLjY2N3ptMCAyMzkuNTZjLTIwLjExMiAwLTM2LjQxOS0xMy40MzUtMzYuNDE5LTMwLjAwNGg3Mi44MzhjMCAxNi41NjYtMTYuMzA2IDMwLjAwNC0zNi40MTkgMzAuMDA0em02MC4xNTMtMzkuOTRINjcuODQyVjE3OC40N2gxMjAuMzE0djIxLjgxNmgtLjAwMnptLS40MzItMzMuMDQ1SDY4LjE4NWMtLjM5OC0uNDU4LS44MDQtLjkxLTEuMTg4LTEuMzc1LTEyLjMxNS0xNC45NTQtMTUuMjE2LTIyLjc2LTE4LjAzMi0zMC43MTYtLjA0OC0uMjYyIDE0LjkzMyAzLjA2IDI1LjU1NiA1LjQ1IDAgMCA1LjQ2NiAxLjI2NSAxMy40NTggMi43MjItNy42NzMtOC45OTQtMTIuMjMtMjAuNDI4LTEyLjIzLTMyLjExNiAwLTI1LjY1OCAxOS42OC00OC4wNzkgMTIuNTgtNjYuMjAxIDYuOTEuNTYyIDE0LjMgMTQuNTgzIDE0LjggMzYuNTA1IDcuMzQ2LTEwLjE1MiAxMC40Mi0yOC42OSAxMC40Mi00MC4wNTYgMC0xMS43NjkgNy43NTUtMjUuNDQgMTUuNTEyLTI1LjkwNy02LjkxNSAxMS4zOTYgMS43OSAyMS4xNjUgOS41MyA0NS40IDIuOTAyIDkuMTAzIDIuNTMyIDI0LjQyMyA0Ljc3MiAzNC4xMzguNzQ0LTIwLjE3OCA0LjIxMy00OS42MiAxNy4wMTQtNTkuNzg0LTUuNjQ3IDEyLjguODM2IDI4LjgxOCA1LjI3IDM2LjUxOCA3LjE1NCAxMi40MjQgMTEuNDkgMjEuODM2IDExLjQ5IDM5LjYzOCAwIDExLjkzNi00LjQwNyAyMy4xNzMtMTEuODQgMzEuOTU4IDguNDUyLTEuNTg2IDE0LjI4OS0zLjAxNiAxNC4yODktMy4wMTZsMjcuNDUtNS4zNTVjLjAwMi0uMDAyLTMuOTg3IDE2LjQwMS0xOS4zMTQgMzIuMTk3eiIgZmlsbD0iI0RBNEUzMSIvPjwvc3ZnPg==,\n    mediatype: image/svg+xml}\n  install:\n    spec:\n      deployments:\n      - name: prometheus-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {k8s-app: prometheus-operator}\n          template:\n            metadata:\n              labels: {k8s-app: prometheus-operator}\n            spec:\n              containers:\n              - args: [-namespace=$(K8S_NAMESPACE), -manage-crds=false, -logtostderr=true,\n                  '--config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1',\n                  '--prometheus-config-reloader=quay.io/coreos/prometheus-config-reloader:v0.22.2']\n                env:\n                - name: K8S_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: quay.io/coreos/prometheus-operator@sha256:3daa69a8c6c2f1d35dcf1fe48a7cd8b230e55f5229a1ded438f687debade5bcf\n                name: prometheus-operator\n                ports:\n                - {containerPort: 8080, name: http}\n                resources:\n                  limits: {cpu: 200m, memory: 100Mi}\n                  requests: {cpu: 100m, memory: 50Mi}\n                securityContext: {allowPrivilegeEscalation: false, readOnlyRootFilesystem: true}\n              nodeSelector: {beta.kubernetes.io/os: linux}\n              serviceAccount: prometheus-operator-0-22-2\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [nodes, services, endpoints, pods]\n          verbs: [get, list, watch]\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [get]\n        serviceAccountName: prometheus-k8s\n      - rules:\n        - apiGroups: [apiextensions.k8s.io]\n          resources: [customresourcedefinitions]\n          verbs: ['*']\n        - apiGroups: [monitoring.coreos.com]\n          resources: [alertmanagers, prometheuses, prometheuses/finalizers, alertmanagers/finalizers,\n            servicemonitors, prometheusrules]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [statefulsets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [configmaps, secrets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [list, delete]\n        - apiGroups: ['']\n          resources: [services, endpoints]\n          verbs: [get, create, update]\n        - apiGroups: ['']\n          resources: [nodes]\n          verbs: [list, watch]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [list, watch]\n        serviceAccountName: prometheus-operator-0-22-2\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [prometheus, monitoring, tsdb, alerting]\n  labels: {alm-owner-prometheus: prometheusoperator, alm-status-descriptors: prometheusoperator.0.22.2}\n  links:\n  - {name: Prometheus, url: 'https://www.prometheus.io/'}\n  - {name: Documentation, url: 'https://coreos.com/operators/prometheus/docs/latest/'}\n  - {name: Prometheus Operator, url: 'https://github.com/coreos/prometheus-operator'}\n  maintainers:\n  - {email: openshift-operators@redhat.com, name: Red Hat}\n  maturity: beta\n  provider: {name: Red Hat}\n  replaces: prometheusoperator.0.15.0\n  selector:\n    matchLabels: {alm-owner-prometheus: prometheusoperator}\n  version: 0.22.2\n", "name": "Prometheus Operator"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"Prometheus\",\"metadata\":{\"name\":\"example\",\"labels\":{\"prometheus\":\"k8s\"}},\"spec\":{\"replicas\":2,\"version\":\"v1.7.0\",\"serviceAccountName\":\"prometheus-k8s\",\"serviceMonitorSelector\":{\"matchExpressions\":[{\"key\":\"k8s-app\",\"operator\":\"Exists\"}]},\"ruleSelector\":{\"matchLabels\":{\"role\":\"prometheus-rulefiles\",\"prometheus\":\"k8s\"}},\"resources\":{\"requests\":{\"memory\":\"400Mi\"}},\"alerting\":{\"alertmanagers\":[{\"namespace\":\"monitoring\",\"name\":\"alertmanager-main\",\"port\":\"web\"}]}}},{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"ServiceMonitor\",\"metadata\":{\"name\":\"example\",\"labels\":{\"k8s-app\":\"prometheus\"}},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"prometheus\",\"prometheus\":\"k8s\"}},\"namespaceSelector\":{\"matchNames\":[\"monitoring\"]},\"endpoints\":[{\"port\":\"web\",\"interval\":\"30s\"}]}},{\"apiVersion\":\"monitoring.coreos.com/v1\",\"kind\":\"Alertmanager\",\"metadata\":{\"name\":\"alertmanager-main\"},\"spec\":{\"replicas\":3}}]',\n    tectonic-visibility: ocs}\n  name: prometheusoperator.0.15.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: A running Prometheus instance\n      displayName: Prometheus\n      kind: Prometheus\n      name: prometheuses.monitoring.coreos.com\n      resources:\n      - {kind: StatefulSet, version: v1beta2}\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: A selector for the ConfigMaps from which to load rule files\n        displayName: Rule Config Map Selector\n        path: ruleSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:core:v1:ConfigMap']\n      - description: ServiceMonitors to be selected for target discovery\n        displayName: Service Monitor Selector\n        path: serviceMonitorSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:monitoring.coreos.com:v1:ServiceMonitor']\n      - description: The ServiceAccount to use to run the Prometheus pods\n        displayName: Service Account\n        path: serviceAccountName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:ServiceAccount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      statusDescriptors:\n      - {description: The current number of Pods for the cluster, displayName: Cluster\n          Size, path: replicas}\n      - description: Label selector to find the service that routes to this prometheus\n        displayName: Prometheus Service Selector\n        path: prometheusSelector\n        x-descriptors: ['urn:alm:descriptor:label:selector']\n      version: v1\n    - description: Configures prometheus to monitor a particular k8s service\n      displayName: Service Monitor\n      kind: ServiceMonitor\n      name: servicemonitors.monitoring.coreos.com\n      resources:\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Selector to select which namespaces the Endpoints objects are\n          discovered from\n        displayName: Monitoring Namespaces\n        path: namespaceSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:namespaceSelector']\n      - description: The label to use to retrieve the job name from\n        displayName: Job Label\n        path: jobLabel\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:label']\n      - description: A list of endpoints allowed as part of this ServiceMonitor\n        displayName: Endpoints\n        path: endpoints\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:endpointList']\n      version: v1\n    - description: Configures an Alert Manager for the namespace\n      displayName: Alert Manager\n      kind: Alertmanager\n      name: alertmanagers.monitoring.coreos.com\n      resources:\n      - {kind: StatefulSet, version: v1beta2}\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      version: v1\n  description: 'An open-source monitoring system with a dimensional data model, flexible\n    query language, efficient time series database and modern alerting approach.\n\n\n    _The Prometheus Open Cloud Service is Public Alpha. The goal before Beta is for\n    additional user testing and minor bug fixes._\n\n\n    ### Monitoring applications\n\n\n    Prometheus scrapes your application metrics based on targets maintained in a ServiceMonitor\n    object. When alerts need to be sent, they are processsed by an AlertManager.\n\n\n    [Read the complete guide to monitoring applications with the Prometheus Open Cloud\n    Service](https://coreos.com/tectonic/docs/latest/alm/prometheus-ocs.html)\n\n\n    ### Supported Features\n\n\n\n    **High availability**\n\n\n\n    Multiple instances are run across failure zones and data is replicated. This keeps\n    your monitoring available during an outage, when you need it most.\n\n\n\n    **Updates via automated operations**\n\n\n\n    New Prometheus versions are deployed using a rolling update with no downtime,\n    making it easy to stay up to date.\n\n\n\n    **Handles the dynamic nature of containers**\n\n\n\n    Alerting rules are attached to groups of containers instead of individual instances,\n    which is ideal for the highly dynamic nature of container deployment.\n\n    '\n  displayName: Prometheus\n  icon:\n  - {base64data: PHN2ZyB3aWR0aD0iMjQ5MCIgaGVpZ2h0PSIyNTAwIiB2aWV3Qm94PSIwIDAgMjU2IDI1NyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCI+PHBhdGggZD0iTTEyOC4wMDEuNjY3QzU3LjMxMS42NjcgMCA1Ny45NzEgMCAxMjguNjY0YzAgNzAuNjkgNTcuMzExIDEyNy45OTggMTI4LjAwMSAxMjcuOTk4UzI1NiAxOTkuMzU0IDI1NiAxMjguNjY0QzI1NiA1Ny45NyAxOTguNjg5LjY2NyAxMjguMDAxLjY2N3ptMCAyMzkuNTZjLTIwLjExMiAwLTM2LjQxOS0xMy40MzUtMzYuNDE5LTMwLjAwNGg3Mi44MzhjMCAxNi41NjYtMTYuMzA2IDMwLjAwNC0zNi40MTkgMzAuMDA0em02MC4xNTMtMzkuOTRINjcuODQyVjE3OC40N2gxMjAuMzE0djIxLjgxNmgtLjAwMnptLS40MzItMzMuMDQ1SDY4LjE4NWMtLjM5OC0uNDU4LS44MDQtLjkxLTEuMTg4LTEuMzc1LTEyLjMxNS0xNC45NTQtMTUuMjE2LTIyLjc2LTE4LjAzMi0zMC43MTYtLjA0OC0uMjYyIDE0LjkzMyAzLjA2IDI1LjU1NiA1LjQ1IDAgMCA1LjQ2NiAxLjI2NSAxMy40NTggMi43MjItNy42NzMtOC45OTQtMTIuMjMtMjAuNDI4LTEyLjIzLTMyLjExNiAwLTI1LjY1OCAxOS42OC00OC4wNzkgMTIuNTgtNjYuMjAxIDYuOTEuNTYyIDE0LjMgMTQuNTgzIDE0LjggMzYuNTA1IDcuMzQ2LTEwLjE1MiAxMC40Mi0yOC42OSAxMC40Mi00MC4wNTYgMC0xMS43NjkgNy43NTUtMjUuNDQgMTUuNTEyLTI1LjkwNy02LjkxNSAxMS4zOTYgMS43OSAyMS4xNjUgOS41MyA0NS40IDIuOTAyIDkuMTAzIDIuNTMyIDI0LjQyMyA0Ljc3MiAzNC4xMzguNzQ0LTIwLjE3OCA0LjIxMy00OS42MiAxNy4wMTQtNTkuNzg0LTUuNjQ3IDEyLjguODM2IDI4LjgxOCA1LjI3IDM2LjUxOCA3LjE1NCAxMi40MjQgMTEuNDkgMjEuODM2IDExLjQ5IDM5LjYzOCAwIDExLjkzNi00LjQwNyAyMy4xNzMtMTEuODQgMzEuOTU4IDguNDUyLTEuNTg2IDE0LjI4OS0zLjAxNiAxNC4yODktMy4wMTZsMjcuNDUtNS4zNTVjLjAwMi0uMDAyLTMuOTg3IDE2LjQwMS0xOS4zMTQgMzIuMTk3eiIgZmlsbD0iI0RBNEUzMSIvPjwvc3ZnPg==,\n    mediatype: image/svg+xml}\n  install:\n    spec:\n      deployments:\n      - name: prometheus-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {k8s-app: prometheus-operator}\n          template:\n            metadata:\n              labels: {k8s-app: prometheus-operator}\n            spec:\n              containers:\n              - command: [sh, -c, '/bin/operator --namespace=$K8S_NAMESPACE --crd-apigroup\n                    monitoring.coreos.com --labels alm-status-descriptors=prometheusoperator.0.15.0,alm-owner-prometheus=prometheusoperator\n                    --kubelet-service=kube-system/kubelet --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1\n\n                    ']\n                env:\n                - name: K8S_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: quay.io/coreos/prometheus-operator@sha256:0e92dd9b5789c4b13d53e1319d0a6375bcca4caaf0d698af61198061222a576d\n                name: prometheus-operator\n                ports:\n                - {containerPort: 8080, name: http}\n                resources:\n                  limits: {cpu: 200m, memory: 100Mi}\n                  requests: {cpu: 100m, memory: 50Mi}\n              serviceAccount: prometheus-operator-0-14-0\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [nodes, services, endpoints, pods]\n          verbs: [get, list, watch]\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [get]\n        serviceAccountName: prometheus-k8s\n      - rules:\n        - apiGroups: [apiextensions.k8s.io]\n          resources: [customresourcedefinitions]\n          verbs: [get, list]\n        - apiGroups: [monitoring.coreos.com]\n          resources: [alertmanagers, prometheuses, servicemonitors]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [statefulsets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [configmaps, secrets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [list, delete]\n        - apiGroups: ['']\n          resources: [services, endpoints]\n          verbs: [get, create, update]\n        - apiGroups: ['']\n          resources: [nodes]\n          verbs: [list, watch]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [list]\n        serviceAccountName: prometheus-operator-0-14-0\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [prometheus, monitoring, tsdb, alerting]\n  labels: {alm-owner-prometheus: prometheusoperator, alm-status-descriptors: prometheusoperator.0.15.0}\n  links:\n  - {name: Prometheus, url: 'https://www.prometheus.io/'}\n  - {name: Documentation, url: 'https://coreos.com/operators/prometheus/docs/latest/'}\n  - {name: Prometheus Operator Source Code, url: 'https://github.com/coreos/prometheus-operator'}\n  maintainers:\n  - {email: support@coreos.com, name: 'CoreOS, Inc'}\n  maturity: alpha\n  provider: {name: 'CoreOS, Inc'}\n  replaces: prometheusoperator.0.14.0\n  selector:\n    matchLabels: {alm-owner-prometheus: prometheusoperator}\n  version: 0.15.0\n", "name": "Prometheus"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata: {name: prometheusoperator.0.14.0, namespace: placeholder}\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: A running Prometheus instance\n      displayName: Prometheus\n      kind: Prometheus\n      name: prometheuses.monitoring.coreos.com\n      resources:\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: A selector for the ConfigMaps from which to load rule files\n        displayName: Rule Config Map Selector\n        path: ruleSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:core:v1:ConfigMap']\n      - description: ServiceMonitors to be selected for target discovery\n        displayName: Service Monitor Selector\n        path: serviceMonitorSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:selector:monitoring.coreos.com:v1:ServiceMonitor']\n      - description: The ServiceAccount to use to run the Prometheus pods\n        displayName: Service Account\n        path: serviceAccountName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:ServiceAccount']\n      - description: Define resources requests and limits for single Pods\n        displayName: Resource Request\n        path: resources.requests\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      statusDescriptors:\n      - {description: The current number of Pods for the cluster, displayName: Cluster\n          Size, path: replicas}\n      - description: Label selector to find the service that routes to this prometheus\n        displayName: Prometheus Service Selector\n        path: prometheusSelector\n        x-descriptors: ['urn:alm:descriptor:label:selector']\n      version: v1\n    - description: Configures prometheus to monitor a particular k8s service\n      displayName: Service Monitor\n      kind: ServiceMonitor\n      name: servicemonitors.monitoring.coreos.com\n      resources:\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Selector to select which namespaces the Endpoints objects are\n          discovered from\n        displayName: Monitoring Namespaces\n        path: namespaceSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:namespaceSelector']\n      - description: The label to use to retrieve the job name from\n        displayName: Job Label\n        path: jobLabel\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:label']\n      - description: A list of endpoints allowed as part of this ServiceMonitor\n        displayName: Endpoints\n        path: endpoints\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:endpointList']\n      version: v1\n    - description: Configures an Alert Manager for the namespace\n      displayName: Alert Manager\n      kind: Alertmanager\n      name: alertmanagers.monitoring.coreos.com\n      resources:\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: Desired number of Pods for the cluster\n        displayName: Size\n        path: replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      version: v1\n  description: 'An open-source monitoring system with a dimensional data model, flexible\n    query language, efficient time series database and modern alerting approach.\n\n\n    _The Prometheus Open Cloud Service is Public Alpha. The goal before Beta is for\n    additional user testing and minor bug fixes._\n\n\n    ### Monitoring applications\n\n\n    Prometheus scrapes your application metrics based on targets maintained in a ServiceMonitor\n    object. When alerts need to be sent, they are processsed by an AlertManager.\n\n\n    [Read the complete guide to monitoring applications with the Prometheus Open Cloud\n    Service](https://coreos.com/tectonic/docs/latest/alm/prometheus-ocs.html)\n\n\n    ## Supported Features\n\n\n    **High availability**\n\n    Multiple instances are run across failure zones and data is replicated. This keeps\n    your monitoring available during an outage, when you need it most.\n\n    **Updates via automated operations**\n\n    New Prometheus versions are deployed using a rolling update with no downtime,\n    making it easy to stay up to date.\n\n    **Handles the dynamic nature of containers**\n\n    Alerting rules are attached to groups of containers instead of individual instances,\n    which is ideal for the highly dynamic nature of container deployment.\n\n    '\n  displayName: Prometheus\n  icon:\n  - {base64data: PHN2ZyB3aWR0aD0iMjQ5MCIgaGVpZ2h0PSIyNTAwIiB2aWV3Qm94PSIwIDAgMjU2IDI1NyIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCI+PHBhdGggZD0iTTEyOC4wMDEuNjY3QzU3LjMxMS42NjcgMCA1Ny45NzEgMCAxMjguNjY0YzAgNzAuNjkgNTcuMzExIDEyNy45OTggMTI4LjAwMSAxMjcuOTk4UzI1NiAxOTkuMzU0IDI1NiAxMjguNjY0QzI1NiA1Ny45NyAxOTguNjg5LjY2NyAxMjguMDAxLjY2N3ptMCAyMzkuNTZjLTIwLjExMiAwLTM2LjQxOS0xMy40MzUtMzYuNDE5LTMwLjAwNGg3Mi44MzhjMCAxNi41NjYtMTYuMzA2IDMwLjAwNC0zNi40MTkgMzAuMDA0em02MC4xNTMtMzkuOTRINjcuODQyVjE3OC40N2gxMjAuMzE0djIxLjgxNmgtLjAwMnptLS40MzItMzMuMDQ1SDY4LjE4NWMtLjM5OC0uNDU4LS44MDQtLjkxLTEuMTg4LTEuMzc1LTEyLjMxNS0xNC45NTQtMTUuMjE2LTIyLjc2LTE4LjAzMi0zMC43MTYtLjA0OC0uMjYyIDE0LjkzMyAzLjA2IDI1LjU1NiA1LjQ1IDAgMCA1LjQ2NiAxLjI2NSAxMy40NTggMi43MjItNy42NzMtOC45OTQtMTIuMjMtMjAuNDI4LTEyLjIzLTMyLjExNiAwLTI1LjY1OCAxOS42OC00OC4wNzkgMTIuNTgtNjYuMjAxIDYuOTEuNTYyIDE0LjMgMTQuNTgzIDE0LjggMzYuNTA1IDcuMzQ2LTEwLjE1MiAxMC40Mi0yOC42OSAxMC40Mi00MC4wNTYgMC0xMS43NjkgNy43NTUtMjUuNDQgMTUuNTEyLTI1LjkwNy02LjkxNSAxMS4zOTYgMS43OSAyMS4xNjUgOS41MyA0NS40IDIuOTAyIDkuMTAzIDIuNTMyIDI0LjQyMyA0Ljc3MiAzNC4xMzguNzQ0LTIwLjE3OCA0LjIxMy00OS42MiAxNy4wMTQtNTkuNzg0LTUuNjQ3IDEyLjguODM2IDI4LjgxOCA1LjI3IDM2LjUxOCA3LjE1NCAxMi40MjQgMTEuNDkgMjEuODM2IDExLjQ5IDM5LjYzOCAwIDExLjkzNi00LjQwNyAyMy4xNzMtMTEuODQgMzEuOTU4IDguNDUyLTEuNTg2IDE0LjI4OS0zLjAxNiAxNC4yODktMy4wMTZsMjcuNDUtNS4zNTVjLjAwMi0uMDAyLTMuOTg3IDE2LjQwMS0xOS4zMTQgMzIuMTk3eiIgZmlsbD0iI0RBNEUzMSIvPjwvc3ZnPg==,\n    mediatype: image/svg+xml}\n  install:\n    spec:\n      deployments:\n      - name: prometheus-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {k8s-app: prometheus-operator}\n          template:\n            metadata:\n              labels: {k8s-app: prometheus-operator}\n            spec:\n              containers:\n              - command: [sh, -c, '/bin/operator --namespace=$K8S_NAMESPACE --crd-apigroup\n                    monitoring.coreos.com --labels alm-status-descriptors=prometheusoperator.0.14.0,alm-owner-prometheus=prometheusoperator\n                    --kubelet-service=kube-system/kubelet --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1\n\n                    ']\n                env:\n                - name: K8S_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: quay.io/coreos/prometheus-operator@sha256:5037b4e90dbb03ebdefaa547ddf6a1f748c8eeebeedf6b9d9f0913ad662b5731\n                name: prometheus-operator\n                ports:\n                - {containerPort: 8080, name: http}\n                resources:\n                  limits: {cpu: 200m, memory: 100Mi}\n                  requests: {cpu: 100m, memory: 50Mi}\n              serviceAccount: prometheus-operator-0-14-0\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [nodes, services, endpoints, pods]\n          verbs: [get, list, watch]\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [get]\n        serviceAccountName: prometheus-k8s\n      - rules:\n        - apiGroups: [apiextensions.k8s.io]\n          resources: [customresourcedefinitions]\n          verbs: [get, list]\n        - apiGroups: [monitoring.coreos.com]\n          resources: [alertmanagers, prometheuses, servicemonitors]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [statefulsets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [configmaps, secrets]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [list, delete]\n        - apiGroups: ['']\n          resources: [services, endpoints]\n          verbs: [get, create, update]\n        - apiGroups: ['']\n          resources: [nodes]\n          verbs: [list, watch]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [list]\n        serviceAccountName: prometheus-operator-0-14-0\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [prometheus, monitoring, tsdb, alerting]\n  labels: {alm-owner-prometheus: prometheusoperator, alm-status-descriptors: prometheusoperator.0.14.0}\n  links:\n  - {name: Prometheus, url: 'https://www.prometheus.io/'}\n  - {name: Documentation, url: 'https://coreos.com/operators/prometheus/docs/latest/'}\n  - {name: Prometheus Operator Source Code, url: 'https://github.com/coreos/prometheus-operator'}\n  maintainers:\n  - {email: support@coreos.com, name: 'CoreOS, Inc'}\n  maturity: alpha\n  provider: {name: 'CoreOS, Inc'}\n  selector:\n    matchLabels: {alm-owner-prometheus: prometheusoperator}\n  version: 0.14.0\n", "name": "Prometheus"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"automationbroker.io/v1alpha1\",\"kind\":\"AutomationBroker\",\"metadata\":{\"name\":\"automation-broker\",\"namespace\":\"automation-broker\"},\"spec\":{\"createBrokerNamespace\":\"false\",\"waitForBroker\":\"false\"}}]'}\n  name: automationbrokeroperator.v0.1.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: An Open Service Broker supporting management of application bundles,\n      displayName: Automation Broker, kind: AutomationBroker, name: automationbrokers.automationbroker.io,\n      version: v1alpha1}\n    - {description: An application bundle available for deployment via Automation\n        Broker, displayName: Automation Broker Bundle, kind: Bundle, name: bundles.automationbroker.io,\n      version: v1alpha1}\n    - {description: An application bundle binding, displayName: Automation Broker\n        Bundle Binding, kind: BundleBinding, name: bundlebindings.automationbroker.io,\n      version: v1alpha1}\n    - {description: An instance of an application bundle, displayName: Automation\n        Broker Bundle Instance, kind: BundleInstance, name: bundleinstances.automationbroker.io,\n      version: v1alpha1}\n  description: 'Ansible Service Broker is an implementation of the [Open Service Broker\n    API](https://github.com/openservicebrokerapi/servicebroker)\n\n    that manages applications defined in [Ansible Playbook Bundles](https://github.com/ansibleplaybookbundle/ansible-playbook-bundle).\n\n    Ansible Playbook Bundles (APB) are a method of defining applications via a collection\n    of Ansible Playbooks built into a container\n\n    with an Ansible runtime with the playbooks corresponding to a type of request\n    specified in the\n\n    [Open Service Broker API Specification](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#api-overview).\n\n\n    Check out the [Keynote Demo from Red Hat Summit 2017](https://youtu.be/8MCbJmZQM9c?list=PLEGSLwUsxfEh4TE2GDU4oygCB-tmShkSn&t=4732)\n\n    '\n  displayName: Automation Broker Operator\n  icon:\n  - {base64data: ,\n    mediatype: image/png}\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterservicebrokers, servicebrokers]\n          verbs: ['*']\n        - apiGroups: [automationbroker.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [clusterroles]\n          verbs: [create, patch]\n        serviceAccountName: automation-broker-operator\n      - rules:\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get, create, delete]\n        - apiGroups: ['']\n          resources: [pods]\n          verbs: [create, get, list, watch]\n        - apiGroups: ['']\n          resources: [serviceaccounts]\n          verbs: [create]\n        - apiGroups: [authentication.k8s.io]\n          resources: [tokenreviews]\n          verbs: [create]\n        - apiGroups: [authorization.k8s.io]\n          resources: [subjectaccessreviews]\n          verbs: [create]\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [rolebindings]\n          verbs: [create, delete]\n        - apiGroups: [networking.k8s.io]\n          resources: [networkpolicies]\n          verbs: [create, delete]\n        - apiGroups: [authorization.openshift.io]\n          resources: [subjectrulesreview]\n          verbs: [create]\n        - apiGroups: [image.openshift.io, '']\n          resources: [images]\n          verbs: [get, list]\n        - apiGroups: [network.openshift.io, '']\n          resources: [clusternetworks, netnamespaces]\n          verbs: [get]\n        - apiGroups: [network.openshift.io, '']\n          resources: [netnamespaces]\n          verbs: [update]\n        serviceAccountName: automation-broker\n      - rules:\n        - nonResourceURLs: [/osb, /osb/*]\n          verbs: [get, post, put, patch, delete]\n        serviceAccountName: automation-broker-client\n      deployments:\n      - name: automation-broker-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: automation-broker-operator-alm-owned}\n          template:\n            metadata:\n              labels: {name: automation-broker-operator-alm-owned}\n              name: automation-broker-operator-alm-owned\n            spec:\n              containers:\n              - env:\n                - {name: IMAGE, value: 'docker.io/ansibleplaybookbundle/origin-ansible-service-broker:v3.11'}\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: docker.io/automationbroker/automation-broker-operator:latest\n                imagePullPolicy: IfNotPresent\n                name: automation-broker-operator\n              serviceAccountName: automation-broker-operator\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get]\n        - apiGroups: ['']\n          resources: [pods, configmaps, secrets, serviceaccounts, services]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: [route.openshift.io]\n          resources: [routes]\n          verbs: ['*']\n        - apiGroups: [apps.openshift.io]\n          resources: [deploymentconfigs]\n          verbs: ['*']\n        serviceAccountName: automation-broker-operator\n      - rules:\n        - apiGroups: ['']\n          resources: [configmaps]\n          verbs: [get, delete]\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [create, delete, get]\n        - apiGroups: [automationbroker.io]\n          resources: [bundles, bundleinstances, bundlebindings]\n          verbs: ['*']\n        serviceAccountName: automation-broker\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: true, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [ansible, automation, broker, open service broker]\n  labels: {alm-status-descriptors: automationbrokeroperator.v0.1.0, operated-by: automationbrokeroperator}\n  links:\n  - {name: Blog, url: 'http://automationbroker.io/'}\n  - {name: YouTube, url: 'https://www.youtube.com/channel/UC04eOMIMiV06_RSZPb4OOBw'}\n  - {name: Source Code, url: 'https://github.com/openshift/ansible-service-broker/'}\n  maintainers:\n  - {email: ansible-service-broker@redhat.com, name: 'Red Hat, Inc.'}\n  maturity: alpha\n  provider: {name: 'Red Hat, Inc.'}\n  selector:\n    matchLabels: {operated-by: automationbrokeroperator}\n  version: 0.1.0\nstatus: {certsLastUpdated: null, certsRotateAt: null, lastTransitionTime: null, lastUpdateTime: null}\n", "name": "Automation Broker Operator"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {categories: openshift optional, certifiedLevel: Primed, containerImage: 'registry.svc.ci.openshift.org/openshift/origin-v4.0:descheduler-operator',\n    createdAt: 2019/11/15, description: An operator to run the OpenShift descheduler,\n    healthIndex: B, repository: 'https://github.com/openshift/descheduler-operator',\n    support: Red Hat}\n  name: descheduler.v0.0.1\n  namespace: openshift-descheduler-operator\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: Represents an instance of a Descheduler application, displayName: Descheduler\n        Operator, kind: Descheduler, name: deschedulers.descheduler.io, version: v1alpha1}\n  description: \"# Descheduler for Kubernetes\\n\\n## Introduction\\n\\nScheduling in Kubernetes\\\n    \\ is the process of binding pending pods to nodes, and is performed by\\na component\\\n    \\ of Kubernetes called kube-scheduler. The scheduler's decisions, whether or where\\\n    \\ a\\npod can or can not be scheduled, are guided by its configurable policy which\\\n    \\ comprises of set of\\nrules, called predicates and priorities. The scheduler's\\\n    \\ decisions are influenced by its view of\\na Kubernetes cluster at that point\\\n    \\ of time when a new pod appears first time for scheduling.\\nAs Kubernetes clusters\\\n    \\ are very dynamic and their state change over time, there may be desired\\nto\\\n    \\ move already running pods to some other nodes for various reasons\\n\\n* Some\\\n    \\ nodes are under or over utilized.\\n* The original scheduling decision does not\\\n    \\ hold true any more, as taints or labels are added to\\nor removed from nodes,\\\n    \\ pod/node affinity requirements are not satisfied any more.\\n* Some nodes failed\\\n    \\ and their pods moved to other nodes.\\n New nodes are added to clusters.\\n\\n\\\n    Consequently, there might be several pods scheduled on less desired nodes in a\\\n    \\ cluster.\\nDescheduler, based on its policy, finds pods that can be moved and\\\n    \\ evicts them. Please\\nnote, in current implementation, descheduler does not schedule\\\n    \\ replacement of evicted pods\\nbut relies on the default scheduler for that.\\n\\\n    \\n## Note\\n\\nAny api could be changed any time with out any notice. That said,\\\n    \\ your feedback is\\nvery important and appreciated to make this project more stable\\\n    \\ and useful.\\n\"\n  displayName: Descheduler\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [services, pods, configmaps, secrets, names, nodes, pods/eviction]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: [batch, extensions]\n          resources: [jobs, cronjobs]\n          verbs: ['*']\n        - apiGroups: [descheduler.io]\n          resources: ['*']\n          verbs: ['*']\n        serviceAccountName: openshift-descheduler\n      deployments:\n      - name: descheduler-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app: descheduler-operator}\n          template:\n            metadata:\n              labels: {app: descheduler-operator}\n            spec:\n              containers:\n              - command: [descheduler-operator]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - {name: OPERATOR_NAME, value: descheduler-operator}\n                image: registry.svc.ci.openshift.org/openshift/origin-v4.0:descheduler-operator\n                imagePullPolicy: Always\n                name: descheduler-operator\n              restartPolicy: Always\n              serviceAccount: openshift-descheduler\n              serviceAccountName: openshift-descheduler\n              terminationGracePeriodSeconds: 5\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  labels: {olm-owner-enterprise-app: descheduler-operator, olm-status-descriptors: descheduler.v0.0.1}\n  maintainers:\n  - {email: support@redhat.com, name: Red Hat}\n  provider: {name: Red Hat}\n  version: 0.0.1\n", "name": "Descheduler"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: \"[\\n    {\\n      \\\"apiVersion\\\": \\\"logging.openshift.io/v1alpha1\\\"\\\n      ,\\n      \\\"kind\\\": \\\"ClusterLogging\\\",\\n      \\\"metadata\\\": {\\n        \\\"name\\\"\\\n      : \\\"instance\\\"\\n       },\\n      \\\"spec\\\": {\\n        \\\"managementState\\\": \\\"\\\n      Managed\\\",\\n        \\\"logStore\\\": {\\n          \\\"type\\\": \\\"elasticsearch\\\",\\n\\\n      \\          \\\"elasticsearch\\\": {\\n            \\\"nodeCount\\\": 3,\\n           \\\n      \\ \\\"redundancyPolicy\\\": \\\"SingleRedundancy\\\",\\n            \\\"storage\\\": {\\n\\\n      \\              \\\"storageClassName\\\": \\\"gp2\\\"\\n              \\\"size\\\": \\\"200G\\\"\\\n      \\n             },\\n           },\\n        },\\n        \\\"visualization\\\": {\\n\\\n      \\          \\\"type\\\": \\\"kibana\\\",\\n          \\\"kibana\\\": {\\n            \\\"replicas\\\"\\\n      : 1\\n          },\\n        },\\n        \\\"curation\\\": {\\n          \\\"type\\\":\\\n      \\ \\\"curator\\\",\\n          \\\"curator\\\": {\\n            \\\"schedule\\\": \\\"30 3 *\\\n      \\ * *\\\"\\n          },\\n        },\\n        \\\"collection\\\": {\\n          \\\"logs\\\"\\\n      : {\\n            \\\"type\\\": \\\"fluentd\\\",\\n            \\\"fluentd\\\": {}\\n     \\\n      \\     },\\n        }\\n      }\\n    }\\n]\", categories: 'openshift optional, logging,\n      aggregated, elasticsearch, kibana, fluentd, efk', certified: 'false', containerImage: 'quay.io/openshift/cluster-logging-operator:latest',\n    createdAt: !!timestamp '2018-08-01 08:00:00', description: The Cluster Logging\n      Operator for OKD provides a means for configuring and managing your aggregated\n      logging stack., support: AOS Logging}\n  name: clusterlogging.v0.0.1\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: A Cluster Logging instance\n      displayName: Cluster Logging\n      kind: ClusterLogging\n      name: clusterloggings.logging.openshift.io\n      resources:\n      - {kind: Deployment, version: v1}\n      - {kind: DaemonSet, version: v1}\n      - {kind: CronJob, version: v1beta1}\n      - {kind: ReplicaSet, version: v1}\n      - {kind: Pod, version: v1}\n      - {kind: ConfigMap, version: v1}\n      - {kind: Secret, version: v1}\n      - {kind: Service, version: v1}\n      - {kind: Route, version: v1}\n      - {kind: Elasticsearch, version: v1alpha1}\n      specDescriptors:\n      - description: The desired number of Kibana Pods for the Visualization component\n        displayName: Kibana Size\n        path: visualization.kibana.replicas\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Resource requirements for the Kibana pods\n        displayName: Kibana Resource Requirements\n        path: visualization.kibana.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      - description: The node selector to use for the Kibana Visualization component\n        displayName: Kibana Node Selector\n        path: visualization.kibana.nodeSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:nodeSelector']\n      - description: The desired number of Elasticsearch Nodes for the Log Storage\n          component\n        displayName: Elasticsearch Size\n        path: logStore.elasticsearch.nodeCount\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Resource requirements for each Elasticsearch node\n        displayName: Elasticsearch Resource Requirements\n        path: logStore.elasticsearch.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      - description: The node selector to use for the Elasticsearch Log Storage component\n        displayName: Elasticsearch Node Selector\n        path: logStore.elasticsearch.nodeSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:nodeSelector']\n      - description: Resource requirements for the Fluentd pods\n        displayName: Fluentd Resource Requirements\n        path: collection.logs.fluentd.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      - description: The node selector to use for the Fluentd log collection component\n        displayName: Fluentd node selector\n        path: collection.logs.fluentd.nodeSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:nodeSelector']\n      - description: Resource requirements for the Rsyslog pods\n        displayName: Rsyslog Resource Requirements\n        path: collection.logs.rsyslog.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      - description: The node selector to use for the Rsyslog log collection component\n        displayName: Rsyslog node selector\n        path: collection.logs.rsyslog.nodeSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:nodeSelector']\n      - description: Resource requirements for the Curator pods\n        displayName: Curator Resource Requirements\n        path: curation.curator.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      - description: The node selector to use for the Curator component\n        displayName: Curator Node Selector\n        path: curation.curator.nodeSelector\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:nodeSelector']\n      - {description: The cron schedule for the Curator component, displayName: Curation\n          Schedule, path: curation.curator.schedule}\n      statusDescriptors:\n      - description: The status for each of the Kibana pods for the Visualization\n          component\n        displayName: Kibana Status\n        path: visualization.kibanaStatus.pods\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Elasticsearch Client pods for the\n          Log Storage component\n        displayName: Elasticsearch Client Pod Status\n        path: logStore.elasticsearchStatus.pods.client\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Elasticsearch Data pods for the Log\n          Storage component\n        displayName: Elasticsearch Data Pod Status\n        path: logStore.elasticsearchStatus.pods.data\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Elasticsearch Master pods for the\n          Log Storage component\n        displayName: Elasticsearch Master Pod Status\n        path: logStore.elasticsearchStatus.pods.master\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - {description: The cluster status for each of the Elasticsearch Clusters for\n          the Log Storage component, displayName: Elasticsearch Cluster Health, path: logStore.elasticsearchStatus.clusterHealth}\n      - description: The status for each of the Fluentd pods for the Log Collection\n          component\n        displayName: Fluentd status\n        path: collection.logs.fluentdStatus.pods\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Rsyslog pods for the Log Collection\n          component\n        displayName: Rsyslog status\n        path: collection.logs.rsyslogStatus.pods\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      version: v1alpha1\n    - description: An Elasticsearch cluster instance\n      displayName: Elasticsearch\n      kind: Elasticsearch\n      name: elasticsearches.logging.openshift.io\n      resources:\n      - {kind: Deployment, version: v1}\n      - {kind: StatefulSet, version: v1}\n      - {kind: ReplicaSet, version: v1}\n      - {kind: Pod, version: v1}\n      - {kind: ConfigMap, version: v1}\n      - {kind: Service, version: v1}\n      - {kind: Route, version: v1}\n      specDescriptors:\n      - description: The name of the serviceaccount used by the Elasticsearch pods\n        displayName: Service Account\n        path: serviceAccountName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:ServiceAccount']\n      - description: The name of the configmap used by the Elasticsearch pods\n        displayName: Config Map\n        path: configMapName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:ConfigMap']\n      - description: The name of the secret used by the Elasticsearch pods\n        displayName: Secret\n        path: secretName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Secret']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: nodeSpec.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      statusDescriptors:\n      - description: The current health of Elasticsearch Cluster\n        displayName: Elasticsearch Cluster Health\n        path: clusterHealth\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase']\n      - description: The status for each of the Elasticsearch pods with the Client\n          role\n        displayName: Elasticsearch Client Status\n        path: pods.client\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Elasticsearch pods with the Data role\n        displayName: Elasticsearch Data Status\n        path: pods.data\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The status for each of the Elasticsearch pods with the Master\n          role\n        displayName: Elasticsearch Master Status\n        path: pods.master\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      version: v1alpha1\n  description: 'The Cluster Logging Operator for OKD provides a means for configuring\n    and managing your aggregated logging stack.\n\n\n    Once installed, the Cluster Logging Operator provides the following features:\n\n    * **Create/Destroy**: Launch and create an aggregated logging stack in the `openshift-logging`\n    namespace.\n\n    * **Simplified Configuration**: Configure your aggregated logging cluster''s structure\n    like components and end points easily.\n\n    '\n  displayName: Cluster Logging\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: [scheduling.k8s.io]\n          resources: [priorityclasses]\n          verbs: ['*']\n        - apiGroups: [oauth.openshift.io]\n          resources: [oauthclients]\n          verbs: ['*']\n        serviceAccountName: cluster-logging-operator\n      deployments:\n      - name: cluster-logging-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: cluster-logging-operator}\n          template:\n            metadata:\n              labels: {name: cluster-logging-operator}\n            spec:\n              containers:\n              - command: [cluster-logging-operator]\n                env:\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'}\n                - {name: OPERATOR_NAME, value: cluster-logging-operator}\n                - {name: ELASTICSEARCH_IMAGE, value: 'quay.io/openshift/origin-logging-elasticsearch5:latest'}\n                - {name: FLUENTD_IMAGE, value: 'quay.io/openshift/origin-logging-fluentd:latest'}\n                - {name: KIBANA_IMAGE, value: 'quay.io/openshift/origin-logging-kibana5:latest'}\n                - {name: CURATOR_IMAGE, value: 'quay.io/openshift/origin-logging-curator5:latest'}\n                - {name: OAUTH_PROXY_IMAGE, value: 'quay.io/openshift/origin-oauth-proxy:latest'}\n                - {name: RSYSLOG_IMAGE, value: 'docker.io/viaq/rsyslog:latest'}\n                image: quay.io/openshift/origin-cluster-logging-operator:latest\n                imagePullPolicy: IfNotPresent\n                name: cluster-logging-operator\n              serviceAccountName: cluster-logging-operator\n      - name: elasticsearch-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: elasticsearch-operator}\n          template:\n            metadata:\n              labels: {name: elasticsearch-operator}\n            spec:\n              containers:\n              - command: [elasticsearch-operator]\n                env:\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'}\n                - {name: OPERATOR_NAME, value: elasticsearch-operator}\n                image: quay.io/openshift/origin-elasticsearch-operator:latest\n                imagePullPolicy: IfNotPresent\n                name: elasticsearch-operator\n                ports:\n                - {containerPort: 60000, name: metrics}\n              serviceAccountName: elasticsearch-operator\n      permissions:\n      - rules:\n        - apiGroups: [logging.openshift.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events, configmaps,\n            secrets, serviceaccounts]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments, daemonsets, replicasets, statefulsets]\n          verbs: ['*']\n        - apiGroups: [route.openshift.io]\n          resources: [routes, routes/custom-host]\n          verbs: ['*']\n        - apiGroups: [batch]\n          resources: [cronjobs]\n          verbs: ['*']\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [roles, rolebindings]\n          verbs: ['*']\n        serviceAccountName: cluster-logging-operator\n      - rules:\n        - apiGroups: [logging.openshift.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, pods/exec, services, endpoints, persistentvolumeclaims,\n            events, configmaps, secrets, serviceaccounts]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments, daemonsets, replicasets, statefulsets]\n          verbs: ['*']\n        - apiGroups: [monitoring.coreos.com]\n          resources: [prometheusrules, servicemonitors]\n          verbs: ['*']\n        serviceAccountName: elasticsearch-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [elasticsearch, kibana, fluentd, logging, aggregated, efk]\n  links:\n  - {name: Elastic, url: 'https://www.elastic.co/'}\n  - {name: Fluentd, url: 'https://www.fluentd.org/'}\n  - {name: Documentation, url: 'https://github.com/openshift/cluster-logging-operator/blob/master/README.md'}\n  - {name: Cluster Logging Operator, url: 'https://github.com/openshift/cluster-logging-operator'}\n  - {name: Elasticsearch Operator, url: 'https://github.com/openshift/elasticsearch-operator'}\n  maintainers:\n  - {email: aos-logging@redhat.com, name: Red Hat}\n  provider: {name: 'Red Hat, Inc'}\n  version: 0.0.1\n", "name": "Cluster Logging"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: \"[\\n  {\\n    \\\"apiVersion\\\": \\\"io.jaegertracing/v1alpha1\\\"\\\n      ,\\n    \\\"kind\\\": \\\"Jaeger\\\",\\n    \\\"metadata\\\": {\\n      \\\"name\\\": \\\"my-jaeger\\\"\\\n      \\n    },\\n    \\\"spec\\\": {\\n      \\\"strategy\\\": \\\"allInOne\\\",\\n      \\\"allInOne\\\"\\\n      : {\\n        \\\"image\\\": \\\"jaegertracing/all-in-one:1.8\\\",\\n        \\\"options\\\"\\\n      : {\\n          \\\"log-level\\\": \\\"debug\\\",\\n          \\\"query\\\": {\\n         \\\n      \\   \\\"base-path\\\": \\\"/jaeger\\\"\\n          }\\n        }\\n      },\\n      \\\"ui\\\"\\\n      : {\\n        \\\"options\\\": {\\n          \\\"dependencies\\\": {\\n            \\\"menuEnabled\\\"\\\n      : false\\n          },\\n          \\\"tracking\\\": {\\n            \\\"gaID\\\": \\\"UA-000000-2\\\"\\\n      \\n          },\\n          \\\"menu\\\": [\\n            {\\n              \\\"label\\\"\\\n      : \\\"About Jaeger\\\",\\n              \\\"items\\\": [\\n                {\\n       \\\n      \\           \\\"label\\\": \\\"Documentation\\\",\\n                  \\\"url\\\": \\\"https://www.jaegertracing.io/docs/latest\\\"\\\n      \\n                }\\n              ]\\n            }\\n          ]\\n        }\\n\\\n      \\      },\\n      \\\"storage\\\": {\\n        \\\"options\\\": {\\n          \\\"memory\\\"\\\n      : {\\n            \\\"max-traces\\\": 100000\\n          }\\n        }\\n      }\\n \\\n      \\   }\\n  }\\n]\", categories: 'tracing, monitoring, troubleshooting', certified: 'false',\n    containerImage: 'docker.io/jaegertracing/jaeger-operator:1.8.2', createdAt: !!timestamp '2019-01-09\n      12:00:00', support: Jaeger}\n  name: jaeger-operator.v1.8.2\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: A configuration file for a Jaeger custom resource., displayName: Jaeger,\n      kind: Jaeger, name: jaegers.io.jaegertracing, version: v1alpha1}\n  description: Provides monitoring and troubleshooting microservices-based distributed\n    systems\n  displayName: jaeger-operator\n  install:\n    spec:\n      deployments:\n      - name: jaeger-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: jaeger-operator}\n          template:\n            metadata:\n              labels: {name: jaeger-operator}\n            spec:\n              containers:\n              - args: [start]\n                env:\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'}\n                - name: POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                - {name: OPERATOR_NAME, value: jaeger-operator}\n                image: jaegertracing/jaeger-operator:1.8.2\n                imagePullPolicy: Always\n                name: jaeger-operator\n                ports:\n                - {containerPort: 60000, name: metrics}\n              serviceAccountName: jaeger-operator\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events, configmaps,\n            secrets, serviceaccounts]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments, daemonsets, replicasets, statefulsets]\n          verbs: ['*']\n        - apiGroups: [monitoring.coreos.com]\n          resources: [servicemonitors]\n          verbs: [get, create]\n        - apiGroups: [io.jaegertracing]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [extensions]\n          resources: [ingresses]\n          verbs: ['*']\n        - apiGroups: [batch]\n          resources: [jobs, cronjobs]\n          verbs: ['*']\n        serviceAccountName: jaeger-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [tracing, monitoring, troubleshooting]\n  labels: {name: jaeger-operator}\n  links:\n  - {name: Jaeger Operator Source Code, url: 'https://github.com/jaegertracing/jaeger-operator'}\n  maintainers:\n  - {email: jaeger-tracing@googlegroups.com, name: Jaeger Google Group}\n  provider: {name: Jaeger}\n  selector:\n    matchLabels: {name: jaeger-operator}\n  version: 1.8.2\n", "name": "jaeger-operator"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"osb.openshift.io/v1alpha1\",\"kind\":\"TemplateServiceBroker\",\"metadata\":{\"name\":\"template-service-broker\",\"namespace\":\"openshift-template-service-broker\"},\"spec\":{\"size\":3,\"version\":\"3.2.13\"}}]'}\n  name: templateservicebrokeroperator.v0.1.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: An Open Service Broker supporting management of OpenShift templates.,\n      displayName: Template Service Broker, kind: TemplateServiceBroker, name: templateservicebrokers.osb.openshift.io,\n      version: v1alpha1}\n  description: \"The Template Service Broker implements the [Open Service Broker\\n\\\n    API](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md)\\n\\\n    endpoints:\\n- *Catalog*: returns a list of available templates as OSB API\\n  *Service*\\\n    \\ objects (the templates are read from one or more\\n  namespaces configured in\\\n    \\ the master config).\\n- *Provision*: provision a given template (referred by\\\n    \\ its UID) into a\\n  namespace.  Under the covers, this creates a non-namespaced\\n\\\n    \\  **BrokerTemplateInstance** object for the template service broker to\\n  store\\\n    \\ state associated with the the instantiation, as well as the\\n  **Secret** and\\\n    \\ **TemplateInstance** objects which are picked up by\\n  the **TemplateInstance**\\\n    \\ controller.  *Provision* is an asynchronous\\n  operation: it may return before\\\n    \\ provisioning is completed, and the\\n  provision status can (must) be recovered\\\n    \\ via the *Last Operation*\\n  endpoint (see below).\\n- *Bind*: for a given template,\\\n    \\ return \\\"credentials\\\" exposed in any\\n  created ConfigMap, Secret, Service\\\n    \\ or Route object (see\\n  ExposeAnnotationPrefix and Base64ExposeAnnotationPrefix\\n\\\n    \\  documentation).  The *Bind* call records the fact that it took\\n  place in\\\n    \\ the appropriate **BrokerTemplateInstance** object.\\n- *Unbind*: this simply\\\n    \\ removes the metadata previously placed in the\\n  **BrokerTemplateInstance**\\\n    \\ object by a *Bind* call.\\n- *Deprovision*: removes the objects created by the\\\n    \\ *Provision* call.\\n  The garbage collector removes all additional objects created\\\n    \\ by the\\n  **TemplateInstance** controller, hopefully transitively, as\\n  documented\\\n    \\ above.\\n- *Last Operation*: returns the status of the previously run\\n  asynchronous\\\n    \\ operation.  In the template service broker, *Provision*\\n  is the only asynchronous\\\n    \\ operation.\\n\"\n  displayName: Template Service Broker Operator\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: [osb.openshift.io]\n          resources: [templateservicebrokers, templateservicebrokers/status]\n          verbs: ['*']\n        - apiGroups: [servicecatalog.k8s.io]\n          resources: [clusterservicebrokers, servicebrokers]\n          verbs: ['*']\n        serviceAccountName: template-service-broker-operator\n      - rules:\n        - nonResourceURLs: [/brokers/template.openshift.io/*]\n          verbs: [delete, get, put, update]\n        serviceAccountName: template-service-broker-client\n      - rules:\n        - apiGroups: [authorization.k8s.io]\n          resources: [subjectaccessreviews]\n          verbs: [create]\n        - apiGroups: [authentication.k8s.io]\n          resources: [tokenreviews]\n          verbs: [create]\n        - apiGroups: [authorization.openshift.io]\n          resources: [subjectaccessreviews]\n          verbs: [create]\n        - apiGroups: [template.openshift.io]\n          resources: [brokertemplateinstances]\n          verbs: [create, delete, get, update]\n        - apiGroups: [template.openshift.io]\n          resources: [brokertemplateinstances/finalizers]\n          verbs: [update]\n        - apiGroups: [template.openshift.io]\n          resources: [templateinstances]\n          verbs: [assign, create, delete, get]\n        - apiGroups: [template.openshift.io]\n          resources: [templates]\n          verbs: [get, list, watch]\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [create, delete, get]\n        - apiGroups: ['']\n          resources: [configmaps, services]\n          verbs: [get]\n        - apiGroups: ['']\n          resources: [routes]\n          verbs: [get]\n        - apiGroups: [route.openshift.io]\n          resources: [routes]\n          verbs: [get]\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create, patch, update]\n        serviceAccountName: apiserver\n      deployments:\n      - name: template-service-broker-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: template-service-broker-operator-alm-owned}\n          template:\n            metadata:\n              labels: {name: template-service-broker-operator-alm-owned}\n              name: template-service-broker-operator-alm-owned\n            spec:\n              containers:\n              - env:\n                - {name: IMAGE, value: 'docker.io/openshift/origin-template-service-broker:latest'}\n                - name: WATCH_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: docker.io/automationbroker/template-service-broker-operator:latest\n                imagePullPolicy: IfNotPresent\n                name: template-service-broker-operator\n              serviceAccountName: template-service-broker-operator\n      permissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [pods, configmaps, secrets, services]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: [apps.openshift.io]\n          resources: [deploymentconfigs]\n          verbs: ['*']\n        serviceAccountName: template-service-broker-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: true, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [template, broker, open service broker]\n  labels: {alm-status-descriptors: templateservicebrokeroperator.v0.1.0, operated-by: templateservicebrokeroperator}\n  links:\n  - {name: Documentation, url: 'https://docs.okd.io/latest/architecture/service_catalog/template_service_broker.html'}\n  - {name: Source Code, url: 'https://github.com/openshift/origin/tree/master/pkg/templateservicebroker'}\n  maintainers:\n  - {email: ansible-service-broker@redhat.com, name: 'Red Hat, Inc.'}\n  maturity: alpha\n  provider: {name: 'Red Hat, Inc.'}\n  selector:\n    matchLabels: {operated-by: templateservicebrokeroperator}\n  version: 0.1.0\n", "name": "Template Service Broker Operator"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {tectonic-visibility: openshift-feature}\n  labels: {alm-catalog: openshift-feature, operator-metering: 'true'}\n  name: metering-operator.v0.13.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: An instance of Metering, displayName: Metering, kind: Metering,\n      name: meterings.metering.openshift.io, version: v1alpha1}\n    - {description: A table within PrestoDB, displayName: Metering Presto Table, kind: PrestoTable,\n      name: prestotables.metering.openshift.io, version: v1alpha1}\n    - {description: A resource describing a source of data for usage by Report Generation\n        Queries, displayName: Metering data source, kind: ReportDataSource, name: reportdatasources.metering.openshift.io,\n      version: v1alpha1}\n    - {description: A SQL query used by Metering to generate reports, displayName: Metering\n        generation query, kind: ReportGenerationQuery, name: reportgenerationqueries.metering.openshift.io,\n      version: v1alpha1}\n    - {description: A Prometheus query by Metering to do metering, displayName: Metering\n        prometheus query, kind: ReportPrometheusQuery, name: reportprometheusqueries.metering.openshift.io,\n      version: v1alpha1}\n    - {description: A metering report summarizes metrics based on the query specified,\n      displayName: Metering Report, kind: Report, name: reports.metering.openshift.io,\n      version: v1alpha1}\n    - {description: Represents a configurable storage location for Metering to store\n        metering and report data, displayName: Metering storage location, kind: StorageLocation,\n      name: storagelocations.metering.openshift.io, version: v1alpha1}\n  description: Metering can generate reports based on historical usage data from a\n    cluster, providing accountability for how resources have been used.\n  displayName: Metering\n  install:\n    spec:\n      clusterPermissions:\n      - rules:\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get]\n        - apiGroups: [authorization.k8s.io]\n          resources: [subjectaccessreviews]\n          verbs: [create]\n        - apiGroups: [authentication.k8s.io]\n          resources: [tokenreviews]\n          verbs: [create]\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [clusterrolebindings, clusterroles]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        serviceAccountName: metering-operator\n      deployments:\n      - name: metering-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app: metering-operator}\n          strategy: {type: Recreate}\n          template:\n            metadata:\n              labels: {app: metering-operator}\n            spec:\n              containers:\n              - args: [run-operator.sh]\n                env:\n                - {name: HELM_RELEASE_CRD_NAME, value: Metering}\n                - {name: HELM_RELEASE_CRD_API_GROUP, value: metering.openshift.io}\n                - {name: HELM_CHART_PATH, value: /openshift-metering-0.1.0.tgz}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - {name: HELM_HOST, value: '127.0.0.1:44134'}\n                - {name: HELM_WAIT, value: 'false'}\n                - {name: HELM_RECONCILE_INTERVAL_SECONDS, value: '30'}\n                - {name: RELEASE_HISTORY_LIMIT, value: '3'}\n                image: quay.io/coreos/metering-helm-operator:0.13.0\n                imagePullPolicy: Always\n                name: metering-operator\n                resources:\n                  limits: {cpu: 50m, memory: 25Mi}\n                  requests: {cpu: 50m, memory: 25Mi}\n              - args: [tiller]\n                env:\n                - name: TILLER_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - {name: TILLER_HISTORY_MAX, value: '3'}\n                image: quay.io/coreos/metering-helm-operator:0.13.0\n                imagePullPolicy: Always\n                livenessProbe:\n                  failureThreshold: 3\n                  httpGet: {path: /liveness, port: 44135, scheme: HTTP}\n                  initialDelaySeconds: 1\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 1\n                name: tiller\n                readinessProbe:\n                  failureThreshold: 3\n                  httpGet: {path: /readiness, port: 44135, scheme: HTTP}\n                  initialDelaySeconds: 1\n                  periodSeconds: 10\n                  successThreshold: 1\n                  timeoutSeconds: 1\n                resources:\n                  limits: {cpu: 50m, memory: 100Mi}\n                  requests: {cpu: 50m, memory: 50Mi}\n              restartPolicy: Always\n              securityContext: {runAsNonRoot: true}\n              serviceAccount: metering-operator\n              terminationGracePeriodSeconds: 30\n      permissions:\n      - rules:\n        - apiGroups: [metering.openshift.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [monitoring.coreos.com]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, pods/attach, pods/exec, pods/portforward, pods/proxy]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: ['']\n          resources: [configmaps, endpoints, persistentvolumeclaims, replicationcontrollers,\n            replicationcontrollers/scale, secrets, serviceaccounts, services, services/proxy]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: ['']\n          resources: [bindings, events, limitranges, namespaces/status, pods/log,\n            pods/status, replicationcontrollers/status, resourcequotas, resourcequotas/status]\n          verbs: [get, list, watch]\n        - apiGroups: ['']\n          resources: [events]\n          verbs: [create, update, patch]\n        - apiGroups: ['']\n          resources: [namespaces]\n          verbs: [get, list, watch]\n        - apiGroups: [apps]\n          resources: [deployments, deployments/rollback, deployments/scale, statefulsets]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: [batch]\n          resources: [cronjobs, jobs]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: [extensions]\n          resources: [daemonsets, deployments, deployments/rollback, deployments/scale,\n            replicasets, replicasets/scale, replicationcontrollers/scale]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: [rbac.authorization.k8s.io]\n          resources: [rolebindings, roles]\n          verbs: [create, delete, deletecollection, get, list, patch, update, watch]\n        - apiGroups: [route.openshift.io]\n          resources: [routes]\n          verbs: [create, get, list, watch, update, delete]\n        serviceAccountName: metering-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: false, type: AllNamespaces}\n  keywords: [metering metrics reporting]\n  labels: {alm-owner-metering: metering-operator, alm-status-descriptors: metering-operator.v0.13.0}\n  maintainers:\n  - {email: sd-operator-metering@redhat.com, name: Red Hat}\n  maturity: alpha\n  provider: {name: Red Hat}\n  selector:\n    matchLabels: {alm-owner-metering: metering-operator}\n  version: 0.13.0\n", "name": "Metering"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {tectonic-visibility: ocs}\n  name: etcdoperator.v0.6.1\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: Represents a cluster of etcd nodes.\n      displayName: etcd Cluster\n      kind: EtcdCluster\n      name: etcdclusters.etcd.database.coreos.com\n      resources:\n      - {kind: Service, version: v1}\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: The desired number of member Pods for the etcd cluster.\n        displayName: Size\n        path: size\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      statusDescriptors:\n      - description: The status of each of the member Pods for the etcd cluster.\n        displayName: Member Status\n        path: members\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The service at which the running etcd cluster can be accessed.\n        displayName: Service\n        path: service\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Service']\n      - {description: The current size of the etcd cluster., displayName: Cluster\n          Size, path: size}\n      - {description: The current version of the etcd cluster., displayName: Current\n          Version, path: currentVersion}\n      - {description: 'The target version of the etcd cluster, after upgrading.',\n        displayName: Target Version, path: targetVersion}\n      - description: The current status of the etcd cluster.\n        displayName: Status\n        path: phase\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase']\n      - description: Explanation for the current status of the cluster.\n        displayName: Status Details\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n  description: \"etcd is a distributed key value store that provides a reliable way\\\n    \\ to store data across a cluster of machines. It\\u2019s open-source and available\\\n    \\ on GitHub. etcd gracefully handles leader elections during network partitions\\\n    \\ and will tolerate machine failure, including the leader. Your applications can\\\n    \\ read and write data into etcd.\\nA simple use-case is to store database connection\\\n    \\ details or feature flags within etcd as key value pairs. These values can be\\\n    \\ watched, allowing your app to reconfigure itself when they change. Advanced\\\n    \\ uses take advantage of the consistency guarantees to implement database leader\\\n    \\ elections or do distributed locking across a cluster of workers.\\n\\n_The etcd\\\n    \\ Open Cloud Service is Public Alpha. The goal before Beta is to fully implement\\\n    \\ backup features._\\n\\n### Reading and writing to etcd\\n\\nCommunicate with etcd\\\n    \\ though its command line utility `etcdctl` or with the API using the automatically\\\n    \\ generated Kubernetes Service.\\n\\n[Read the complete guide to using the etcd\\\n    \\ Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)\\n\\\n    \\n### Supported Features\\n**High availability**\\nMultiple instances of etcd are\\\n    \\ networked together and secured. Individual failures or networking issues are\\\n    \\ transparently handled to keep your cluster up and running.\\n**Automated updates**\\n\\\n    Rolling out a new etcd version works like all Kubernetes rolling updates. Simply\\\n    \\ declare the desired version, and the etcd service starts a safe rolling update\\\n    \\ to the new version automatically.\\n**Backups included**\\nComing soon, the ability\\\n    \\ to schedule backups to happen on or off cluster.\\n\"\n  displayName: etcd\n  icon:\n  - {base64data: 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,\n    mediatype: image/png}\n  install:\n    spec:\n      deployments:\n      - name: etcd-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: etcd-operator-alm-owned}\n          template:\n            metadata:\n              labels: {name: etcd-operator-alm-owned}\n              name: etcd-operator-alm-owned\n            spec:\n              containers:\n              - command: [etcd-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:bd944a211eaf8f31da5e6d69e8541e7cada8f16a9f7a5a570b22478997819943\n                name: etcd-operator\n              serviceAccountName: etcd-operator\n      permissions:\n      - rules:\n        - apiGroups: [etcd.database.coreos.com]\n          resources: [etcdclusters]\n          verbs: ['*']\n        - apiGroups: [storage.k8s.io]\n          resources: [storageclasses]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get]\n        serviceAccountName: etcd-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [etcd, key value, database, coreos, open source]\n  labels: {alm-owner-etcd: etcdoperator, alm-status-descriptors: etcdoperator.v0.6.1,\n    operated-by: etcdoperator}\n  links:\n  - {name: Blog, url: 'https://coreos.com/etcd'}\n  - {name: Documentation, url: 'https://coreos.com/operators/etcd/docs/latest/'}\n  - {name: etcd Operator Source Code, url: 'https://github.com/coreos/etcd-operator'}\n  maintainers:\n  - {email: support@coreos.com, name: 'CoreOS, Inc'}\n  maturity: alpha\n  provider: {name: 'CoreOS, Inc'}\n  selector:\n    matchLabels: {alm-owner-etcd: etcdoperator, operated-by: etcdoperator}\n  version: 0.6.1\n", "name": "etcd"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdCluster\",\"metadata\":{\"name\":\"example\",\"namespace\":\"default\"},\"spec\":{\"size\":3,\"version\":\"3.2.13\"}},{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdRestore\",\"metadata\":{\"name\":\"example-etcd-cluster\"},\"spec\":{\"etcdCluster\":{\"name\":\"example-etcd-cluster\"},\"backupStorageType\":\"S3\",\"s3\":{\"path\":\"<full-s3-path>\",\"awsSecret\":\"<aws-secret>\"}}},{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdBackup\",\"metadata\":{\"name\":\"example-etcd-cluster-backup\"},\"spec\":{\"etcdEndpoints\":[\"<etcd-cluster-endpoints>\"],\"storageType\":\"S3\",\"s3\":{\"path\":\"<full-s3-path>\",\"awsSecret\":\"<aws-secret>\"}}}]',\n    tectonic-visibility: ocs}\n  name: etcdoperator.v0.9.2\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: Represents a cluster of etcd nodes.\n      displayName: etcd Cluster\n      kind: EtcdCluster\n      name: etcdclusters.etcd.database.coreos.com\n      resources:\n      - {kind: Service, version: v1}\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: The desired number of member Pods for the etcd cluster.\n        displayName: Size\n        path: size\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: pod.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      statusDescriptors:\n      - description: The status of each of the member Pods for the etcd cluster.\n        displayName: Member Status\n        path: members\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The service at which the running etcd cluster can be accessed.\n        displayName: Service\n        path: serviceName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Service']\n      - {description: The current size of the etcd cluster., displayName: Cluster\n          Size, path: size}\n      - {description: The current version of the etcd cluster., displayName: Current\n          Version, path: currentVersion}\n      - {description: 'The target version of the etcd cluster, after upgrading.',\n        displayName: Target Version, path: targetVersion}\n      - description: The current status of the etcd cluster.\n        displayName: Status\n        path: phase\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase']\n      - description: Explanation for the current status of the cluster.\n        displayName: Status Details\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n    - description: Represents the intent to backup an etcd cluster.\n      displayName: etcd Backup\n      kind: EtcdBackup\n      name: etcdbackups.etcd.database.coreos.com\n      specDescriptors:\n      - description: Specifies the endpoints of an etcd cluster.\n        displayName: etcd Endpoint(s)\n        path: etcdEndpoints\n        x-descriptors: ['urn:alm:descriptor:etcd:endpoint']\n      - description: The full AWS S3 path where the backup is saved.\n        displayName: S3 Path\n        path: s3.path\n        x-descriptors: ['urn:alm:descriptor:aws:s3:path']\n      - description: The name of the secret object that stores the AWS credential\n          and config files.\n        displayName: AWS Secret\n        path: s3.awsSecret\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Secret']\n      statusDescriptors:\n      - description: Indicates if the backup was successful.\n        displayName: Succeeded\n        path: succeeded\n        x-descriptors: ['urn:alm:descriptor:text']\n      - description: Indicates the reason for any backup related failures.\n        displayName: Reason\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n    - description: Represents the intent to restore an etcd cluster from a backup.\n      displayName: etcd Restore\n      kind: EtcdRestore\n      name: etcdrestores.etcd.database.coreos.com\n      specDescriptors:\n      - description: References the EtcdCluster which should be restored,\n        displayName: etcd Cluster\n        path: etcdCluster.name\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:EtcdCluster', 'urn:alm:descriptor:text']\n      - description: The full AWS S3 path where the backup is saved.\n        displayName: S3 Path\n        path: s3.path\n        x-descriptors: ['urn:alm:descriptor:aws:s3:path']\n      - description: The name of the secret object that stores the AWS credential\n          and config files.\n        displayName: AWS Secret\n        path: s3.awsSecret\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Secret']\n      statusDescriptors:\n      - description: Indicates if the restore was successful.\n        displayName: Succeeded\n        path: succeeded\n        x-descriptors: ['urn:alm:descriptor:text']\n      - description: Indicates the reason for any restore related failures.\n        displayName: Reason\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n  description: \"etcd is a distributed key value store that provides a reliable way\\\n    \\ to store data across a cluster of machines. It\\u2019s open-source and available\\\n    \\ on GitHub. etcd gracefully handles leader elections during network partitions\\\n    \\ and will tolerate machine failure, including the leader. Your applications can\\\n    \\ read and write data into etcd.\\nA simple use-case is to store database connection\\\n    \\ details or feature flags within etcd as key value pairs. These values can be\\\n    \\ watched, allowing your app to reconfigure itself when they change. Advanced\\\n    \\ uses take advantage of the consistency guarantees to implement database leader\\\n    \\ elections or do distributed locking across a cluster of workers.\\n\\n_The etcd\\\n    \\ Open Cloud Service is Public Alpha. The goal before Beta is to fully implement\\\n    \\ backup features._\\n\\n### Reading and writing to etcd\\n\\nCommunicate with etcd\\\n    \\ though its command line utility `etcdctl` or with the API using the automatically\\\n    \\ generated Kubernetes Service.\\n\\n[Read the complete guide to using the etcd\\\n    \\ Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)\\n\\\n    \\n### Supported Features\\n\\n\\n**High availability**\\n\\n\\nMultiple instances of\\\n    \\ etcd are networked together and secured. Individual failures or networking issues\\\n    \\ are transparently handled to keep your cluster up and running.\\n\\n\\n**Automated\\\n    \\ updates**\\n\\n\\nRolling out a new etcd version works like all Kubernetes rolling\\\n    \\ updates. Simply declare the desired version, and the etcd service starts a safe\\\n    \\ rolling update to the new version automatically.\\n\\n\\n**Backups included**\\n\\\n    \\n\\nComing soon, the ability to schedule backups to happen on or off cluster.\\n\"\n  displayName: etcd\n  icon:\n  - {base64data: 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,\n    mediatype: image/png}\n  install:\n    spec:\n      deployments:\n      - name: etcd-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: etcd-operator-alm-owned}\n          template:\n            metadata:\n              labels: {name: etcd-operator-alm-owned}\n              name: etcd-operator-alm-owned\n            spec:\n              containers:\n              - command: [etcd-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2\n                name: etcd-operator\n              - command: [etcd-backup-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2\n                name: etcd-backup-operator\n              - command: [etcd-restore-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:c0301e4686c3ed4206e370b42de5a3bd2229b9fb4906cf85f3f30650424abec2\n                name: etcd-restore-operator\n              serviceAccountName: etcd-operator\n      permissions:\n      - rules:\n        - apiGroups: [etcd.database.coreos.com]\n          resources: [etcdclusters, etcdbackups, etcdrestores]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get]\n        serviceAccountName: etcd-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [etcd, key value, database, coreos, open source]\n  labels: {alm-owner-etcd: etcdoperator, operated-by: etcdoperator}\n  links:\n  - {name: Blog, url: 'https://coreos.com/etcd'}\n  - {name: Documentation, url: 'https://coreos.com/operators/etcd/docs/latest/'}\n  - {name: etcd Operator Source Code, url: 'https://github.com/coreos/etcd-operator'}\n  maintainers:\n  - {email: support@coreos.com, name: 'CoreOS, Inc'}\n  maturity: alpha\n  provider: {name: 'CoreOS, Inc'}\n  replaces: etcdoperator.v0.9.0\n  selector:\n    matchLabels: {alm-owner-etcd: etcdoperator, operated-by: etcdoperator}\n  version: 0.9.2\n", "name": "etcd"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations: {alm-examples: '[{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdCluster\",\"metadata\":{\"name\":\"example\",\"namespace\":\"default\"},\"spec\":{\"size\":3,\"version\":\"3.2.13\"}},{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdRestore\",\"metadata\":{\"name\":\"example-etcd-cluster\"},\"spec\":{\"etcdCluster\":{\"name\":\"example-etcd-cluster\"},\"backupStorageType\":\"S3\",\"s3\":{\"path\":\"<full-s3-path>\",\"awsSecret\":\"<aws-secret>\"}}},{\"apiVersion\":\"etcd.database.coreos.com/v1beta2\",\"kind\":\"EtcdBackup\",\"metadata\":{\"name\":\"example-etcd-cluster-backup\"},\"spec\":{\"etcdEndpoints\":[\"<etcd-cluster-endpoints>\"],\"storageType\":\"S3\",\"s3\":{\"path\":\"<full-s3-path>\",\"awsSecret\":\"<aws-secret>\"}}}]',\n    tectonic-visibility: ocs}\n  name: etcdoperator.v0.9.0\n  namespace: placeholder\nspec:\n  customresourcedefinitions:\n    owned:\n    - description: Represents a cluster of etcd nodes.\n      displayName: etcd Cluster\n      kind: EtcdCluster\n      name: etcdclusters.etcd.database.coreos.com\n      resources:\n      - {kind: Service, version: v1}\n      - {kind: Pod, version: v1}\n      specDescriptors:\n      - description: The desired number of member Pods for the etcd cluster.\n        displayName: Size\n        path: size\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podCount']\n      - description: Limits describes the minimum/maximum amount of compute resources\n          required/allowed\n        displayName: Resource Requirements\n        path: pod.resources\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:resourceRequirements']\n      statusDescriptors:\n      - description: The status of each of the member Pods for the etcd cluster.\n        displayName: Member Status\n        path: members\n        x-descriptors: ['urn:alm:descriptor:com.tectonic.ui:podStatuses']\n      - description: The service at which the running etcd cluster can be accessed.\n        displayName: Service\n        path: serviceName\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Service']\n      - {description: The current size of the etcd cluster., displayName: Cluster\n          Size, path: size}\n      - {description: The current version of the etcd cluster., displayName: Current\n          Version, path: currentVersion}\n      - {description: 'The target version of the etcd cluster, after upgrading.',\n        displayName: Target Version, path: targetVersion}\n      - description: The current status of the etcd cluster.\n        displayName: Status\n        path: phase\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase']\n      - description: Explanation for the current status of the cluster.\n        displayName: Status Details\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n    - description: Represents the intent to backup an etcd cluster.\n      displayName: etcd Backup\n      kind: EtcdBackup\n      name: etcdbackups.etcd.database.coreos.com\n      specDescriptors:\n      - description: Specifies the endpoints of an etcd cluster.\n        displayName: etcd Endpoint(s)\n        path: etcdEndpoints\n        x-descriptors: ['urn:alm:descriptor:etcd:endpoint']\n      - description: The full AWS S3 path where the backup is saved.\n        displayName: S3 Path\n        path: s3.path\n        x-descriptors: ['urn:alm:descriptor:aws:s3:path']\n      - description: The name of the secret object that stores the AWS credential\n          and config files.\n        displayName: AWS Secret\n        path: s3.awsSecret\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Secret']\n      statusDescriptors:\n      - description: Indicates if the backup was successful.\n        displayName: Succeeded\n        path: succeeded\n        x-descriptors: ['urn:alm:descriptor:text']\n      - description: Indicates the reason for any backup related failures.\n        displayName: Reason\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n    - description: Represents the intent to restore an etcd cluster from a backup.\n      displayName: etcd Restore\n      kind: EtcdRestore\n      name: etcdrestores.etcd.database.coreos.com\n      specDescriptors:\n      - description: References the EtcdCluster which should be restored,\n        displayName: etcd Cluster\n        path: etcdCluster.name\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:EtcdCluster', 'urn:alm:descriptor:text']\n      - description: The full AWS S3 path where the backup is saved.\n        displayName: S3 Path\n        path: s3.path\n        x-descriptors: ['urn:alm:descriptor:aws:s3:path']\n      - description: The name of the secret object that stores the AWS credential\n          and config files.\n        displayName: AWS Secret\n        path: s3.awsSecret\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes:Secret']\n      statusDescriptors:\n      - description: Indicates if the restore was successful.\n        displayName: Succeeded\n        path: succeeded\n        x-descriptors: ['urn:alm:descriptor:text']\n      - description: Indicates the reason for any restore related failures.\n        displayName: Reason\n        path: reason\n        x-descriptors: ['urn:alm:descriptor:io.kubernetes.phase:reason']\n      version: v1beta2\n  description: \"etcd is a distributed key value store that provides a reliable way\\\n    \\ to store data across a cluster of machines. It\\u2019s open-source and available\\\n    \\ on GitHub. etcd gracefully handles leader elections during network partitions\\\n    \\ and will tolerate machine failure, including the leader. Your applications can\\\n    \\ read and write data into etcd.\\nA simple use-case is to store database connection\\\n    \\ details or feature flags within etcd as key value pairs. These values can be\\\n    \\ watched, allowing your app to reconfigure itself when they change. Advanced\\\n    \\ uses take advantage of the consistency guarantees to implement database leader\\\n    \\ elections or do distributed locking across a cluster of workers.\\n\\n_The etcd\\\n    \\ Open Cloud Service is Public Alpha. The goal before Beta is to fully implement\\\n    \\ backup features._\\n\\n### Reading and writing to etcd\\n\\nCommunicate with etcd\\\n    \\ though its command line utility `etcdctl` or with the API using the automatically\\\n    \\ generated Kubernetes Service.\\n\\n[Read the complete guide to using the etcd\\\n    \\ Open Cloud Service](https://coreos.com/tectonic/docs/latest/alm/etcd-ocs.html)\\n\\\n    \\n### Supported Features\\n\\n\\n**High availability**\\n\\n\\nMultiple instances of\\\n    \\ etcd are networked together and secured. Individual failures or networking issues\\\n    \\ are transparently handled to keep your cluster up and running.\\n\\n\\n**Automated\\\n    \\ updates**\\n\\n\\nRolling out a new etcd version works like all Kubernetes rolling\\\n    \\ updates. Simply declare the desired version, and the etcd service starts a safe\\\n    \\ rolling update to the new version automatically.\\n\\n\\n**Backups included**\\n\\\n    \\n\\nComing soon, the ability to schedule backups to happen on or off cluster.\\n\"\n  displayName: etcd\n  icon:\n  - {base64data: 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,\n    mediatype: image/png}\n  install:\n    spec:\n      deployments:\n      - name: etcd-operator\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {name: etcd-operator-alm-owned}\n          template:\n            metadata:\n              labels: {name: etcd-operator-alm-owned}\n              name: etcd-operator-alm-owned\n            spec:\n              containers:\n              - command: [etcd-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8\n                name: etcd-operator\n              - command: [etcd-backup-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8\n                name: etcd-backup-operator\n              - command: [etcd-restore-operator, --create-crd=false]\n                env:\n                - name: MY_POD_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: MY_POD_NAME\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.name}\n                image: quay.io/coreos/etcd-operator@sha256:db563baa8194fcfe39d1df744ed70024b0f1f9e9b55b5923c2f3a413c44dc6b8\n                name: etcd-restore-operator\n              serviceAccountName: etcd-operator\n      permissions:\n      - rules:\n        - apiGroups: [etcd.database.coreos.com]\n          resources: [etcdclusters, etcdbackups, etcdrestores]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments]\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [secrets]\n          verbs: [get]\n        serviceAccountName: etcd-operator\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  keywords: [etcd, key value, database, coreos, open source]\n  labels: {alm-owner-etcd: etcdoperator, operated-by: etcdoperator}\n  links:\n  - {name: Blog, url: 'https://coreos.com/etcd'}\n  - {name: Documentation, url: 'https://coreos.com/operators/etcd/docs/latest/'}\n  - {name: etcd Operator Source Code, url: 'https://github.com/coreos/etcd-operator'}\n  maintainers:\n  - {email: support@coreos.com, name: 'CoreOS, Inc'}\n  maturity: alpha\n  provider: {name: 'CoreOS, Inc'}\n  replaces: etcdoperator.v0.6.1\n  selector:\n    matchLabels: {alm-owner-etcd: etcdoperator, operated-by: etcdoperator}\n  version: 0.9.0\n", "name": "etcd"}, {"yaml": "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata: {name: federationv2.v0.0.2, namespace: placeholder}\nspec:\n  customresourcedefinitions:\n    owned:\n    - {description: Represents an instance of a Cluster Registry, displayName: Cluster\n        Registry Application, kind: Cluster, name: clusters.clusterregistry.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedCluster resource, displayName: FederatedCluster\n        Resource, kind: FederatedCluster, name: federatedclusters.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedConfigMap resource, displayName: FederatedConfigMap\n        Resource, kind: FederatedConfigMap, name: federatedconfigmaps.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedConfigMapOverride resource,\n      displayName: FederatedConfigMapOverride Resource, kind: FederatedConfigMapOverride,\n      name: federatedconfigmapoverrides.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedConfigMapPlacement resource,\n      displayName: FederatedConfigMapPlacement Resource, kind: FederatedConfigMapPlacement,\n      name: federatedconfigmapplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedDeployment resource, displayName: FederatedDeployment\n        Resource, kind: FederatedDeployment, name: federateddeployments.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedDeploymentOverride resource,\n      displayName: FederatedDeploymentOverride Resource, kind: FederatedDeploymentOverride,\n      name: federateddeploymentoverrides.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedDeploymentPlacement resource,\n      displayName: FederatedDeploymentPlacement Resource, kind: FederatedDeploymentPlacement,\n      name: federateddeploymentplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedIngress resource, displayName: FederatedIngress\n        Resource, kind: FederatedIngress, name: federatedingresses.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedIngressPlacement resource,\n      displayName: FederatedIngressPlacement Resource, kind: FederatedIngressPlacement,\n      name: federatedingressplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedJob resource, displayName: FederatedJob\n        Resource, kind: FederatedJob, name: federatedjobs.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedJobOverride resource, displayName: FederatedJobOverride\n        Resource, kind: FederatedJobOverride, name: federatedjoboverrides.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedJobPlacement resource, displayName: FederatedJobPlacement\n        Resource, kind: FederatedJobPlacement, name: federatedjobplacements.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedNamespacePlacement resource,\n      displayName: FederatedNamespacePlacement Resource, kind: FederatedNamespacePlacement,\n      name: federatednamespaceplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedReplicaSet resource, displayName: FederatedReplicaSet\n        Resource, kind: FederatedReplicaSet, name: federatedreplicasets.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedReplicaSetOverride resource,\n      displayName: FederatedReplicaSetOverride Resource, kind: FederatedReplicaSetOverride,\n      name: federatedreplicasetoverrides.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedReplicaSetPlacement resource,\n      displayName: FederatedReplicaSetPlacement Resource, kind: FederatedReplicaSetPlacement,\n      name: federatedreplicasetplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedSecret resource, displayName: FederatedSecret\n        Resource, kind: FederatedSecret, name: federatedsecrets.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedSecretOverride resource,\n      displayName: FederatedSecretOverride Resource, kind: FederatedSecretOverride,\n      name: federatedsecretoverrides.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedSecretPlacement resource,\n      displayName: FederatedSecretPlacement Resource, kind: FederatedSecretPlacement,\n      name: federatedsecretplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedService resource, displayName: FederatedService\n        Resource, kind: FederatedService, name: federatedservices.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a FederatedServiceAccount resource,\n      displayName: FederatedServiceAccount Resource, kind: FederatedServiceAccount,\n      name: federatedserviceaccounts.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedServiceAccountPlacement resource,\n      displayName: FederatedServiceAccountPlacement Resource, kind: FederatedServiceAccountPlacement,\n      name: federatedserviceaccountplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederatedServicePlacement resource,\n      displayName: FederatedServicePlacement Resource, kind: FederatedServicePlacement,\n      name: federatedserviceplacements.core.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a FederationV2 sync controller, displayName: FederationV2\n        Push Reconciler Application, kind: FederatedTypeConfig, name: federatedtypeconfigs.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a PropagatedVersion resource, displayName: PropagatedVersion\n        Resource, kind: PropagatedVersion, name: propagatedversions.core.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a DNSEndpoint resource, displayName: DNSEndpoint\n        Resource, kind: DNSEndpoint, name: dnsendpoints.multiclusterdns.federation.k8s.io,\n      version: v1alpha1}\n    - {description: Represents an instance of a MultiClusterIngressDNSRecord resource,\n      displayName: MultiClusterIngressDNSRecord Resource, kind: MultiClusterIngressDNSRecord,\n      name: multiclusteringressdnsrecords.multiclusterdns.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a MultiClusterServiceDNSRecord resource,\n      displayName: MultiClusterServiceDNSRecord Resource, kind: MultiClusterServiceDNSRecord,\n      name: multiclusterservicednsrecords.multiclusterdns.federation.k8s.io, version: v1alpha1}\n    - {description: Represents an instance of a ReplicaSchedulingPreference resource,\n      displayName: ReplicaSchedulingPreference Resource, kind: ReplicaSchedulingPreference,\n      name: replicaschedulingpreferences.scheduling.federation.k8s.io, version: v1alpha1}\n  description: 'Kubernetes Federation V2 namespace-scoped installation\n\n    '\n  displayName: FederationV2\n  install:\n    spec:\n      deployments:\n      - name: federation-controller-manager\n        spec:\n          replicas: 1\n          selector:\n            matchLabels: {app: federation-controller-manager}\n          template:\n            metadata:\n              labels: {app: federation-controller-manager}\n            spec:\n              containers:\n              - args: [--federation-namespace=$(FEDERATION_NAMESPACE), --install-crds=false,\n                  --limited-scope=true, --registry-namespace=$(CLUSTER_REGISTRY_NAMESPACE)]\n                command: [/root/controller-manager]\n                env:\n                - name: FEDERATION_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                - name: CLUSTER_REGISTRY_NAMESPACE\n                  valueFrom:\n                    fieldRef: {fieldPath: metadata.namespace}\n                image: quay.io/kubernetes-multicluster/federation-v2:v0.0.2-rc.1\n                imagePullPolicy: Always\n                name: controller-manager\n                resources:\n                  limits: {cpu: 100m, memory: 128Mi}\n                  requests: {cpu: 100m, memory: 64Mi}\n              restartPolicy: Always\n              serviceAccount: federation-controller-manager\n              serviceAccountName: federation-controller-manager\n              terminationGracePeriodSeconds: 5\n      permissions:\n      - rules:\n        - apiGroups: [clusterregistry.k8s.io]\n          resources: [clusters]\n          verbs: ['*']\n        - apiGroups: [core.federation.k8s.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [multiclusterdns.federation.k8s.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: [scheduling.federation.k8s.io]\n          resources: ['*']\n          verbs: ['*']\n        - apiGroups: ['']\n          resources: [pods, services, endpoints, persistentvolumeclaims, events, configmaps,\n            secrets]\n          verbs: ['*']\n        - apiGroups: [apps]\n          resources: [deployments, daemonsets, replicasets, statefulsets]\n          verbs: ['*']\n        serviceAccountName: federation-controller-manager\n    strategy: deployment\n  installModes:\n  - {supported: true, type: OwnNamespace}\n  - {supported: true, type: SingleNamespace}\n  - {supported: false, type: MultiNamespace}\n  - {supported: true, type: AllNamespaces}\n  labels: {alm-owner-federationv2: federationv2, alm-status-descriptors: federationv2.v0.0.2}\n  maturity: alpha\n  provider: {name: 'Red Hat, Inc'}\n  version: 0.0.2\n", "name": "FederationV2"}]}